# Cuts it down to 55 x 169
data_genefilter <- data[which(selected), ]
data.frame(data_genefilter)
# Cuts it down to 55 x 169
data_genefilter <- data.frame(data[which(selected), ])
#ANOVA
model <- lm(df ~ as.factor(diagnosis), data = df)
#ANOVA
model <- lm(data_genefilter ~ as.factor(diagnosis), data = data_genefilter)
# Get expressions
# 22011 x 169
data <- as.data.frame(exprs(e))
# Create a matrix of values with the head as the diagnosis
df <- data
colnames(df) <- diagnosis
selected <- genefilter(data, ff)
# Cuts it down to 55 x 169
df_genefilter <- df[which(selected), ]
selected <- genefilter(df, ff)
# Cuts it down to 55 x 169
df_genefilter <- df[which(selected), ]
#ANOVA
model <- lm(df ~ as.factor(diagnosis), data = df)
df
df$SCZ
as.factor(diagnosis)
d <- data.frame(disorder=disorder, expression=data)
d <- data.frame(diagnosis=diagnosis, expression=data)
help(data.frame)
data.frame(data, row.names = diagnosis)
data.frame(data)
data <- data.frame(data)
str(data)
View(data)
data.frame(data[0, ], row.names = diagnosis)
data.frame(data, row.names = data[0, ])
# Get expressions
# 22011 x 169
data <- as.data.frame(exprs(e))
# Create a matrix of values with the head as the diagnosis
df <- data
colnames(df) <- diagnosis
df <- data.frame(df, stringsAsFactors = TRUE)
df
df <- data.frame(df, row.names = 'features')
df <- data.frame(df, row.names = "features")
# Get expressions
# 22011 x 169
data <- as.data.frame(exprs(e))
# Create a matrix of values with the head as the diagnosis
df <- data
df <- rbind(df, diagnosis)
View(df)
df[, 'diagnosis']
rownames(df)
rownames(df)[22012]
rownames(df)[22012] <- "diagnosis"
rownames(df)
selected <- genefilter(df, ff)
lm(data ~ .)
lm(data ~ ., data = data)
lm(data[1] ~ as.factor(diagnosis), data = data)
lm(data[1, ] ~ as.factor(diagnosis), data = data)
lm(data[1, ] ~ as.factor(diagnosis))
data[1, ]
lm(data[1, ] ~ as.factor(diagnosis))
lm(data.frame(exprs=data[1, ], diagnosis=diagnosis) ~ as.factor(diagnosis))
data.frame(exprs=data[1, ], diagnosis=diagnosis)
data.frame(exprs=data[1-len(data), ], diagnosis=diagnosis)
data.frame(exprs=data[1-length(data), ], diagnosis=diagnosis)
data.frame(exprs=data[1, ], diagnosis=diagnosis)
data.frame(exprs=data[0-1, ], diagnosis=diagnosis)
data.frame(exprs=data[1, ], diagnosis=diagnosis)
samp <- data.frame(exprs=data[1, ], diagnosis=diagnosis)
samp
View(samp)
samp <- data.frame(exprs=as.vector(data[1, ]), diagnosis=diagnosis)
samp$diagnosis
samp <- data.frame(as.vector(data[1, ]), diagnosis=diagnosis)
samp <- data.frame(exprs=as.vector(data[1, ]), diagnosis=diagnosis)
samp$exprs
samp$exprs.GSM6341299_9.001_HuEx.1_0.st.v2_.CEL
lm(samp ~ as.factor(diagnosis))
lm(data.frame(samp) ~ as.factor(diagnosis))
as.list(data[1, ])
as.array(data[1, ])
as.matrix.data.frame(data)
as.matrix.data.frame(data[1, ])
as.matrix.data.frame(data)
data <- as.matrix.data.frame(data)
View(data)
# Get expressions
# 22011 x 169
data <- as.data.frame(exprs(e))
as.vector(exprs(e))
as.vector(exprs(e)[1, ])
# Get expressions
# 22011 x 169
gene_expressions <- exprs(e)
data <- as.data.frame(gene_expressions)
samp <- data.frame(gene_expressions=gene_expressions[1, ], diagnosis=diagnosis)
lm(samp ~ as.factor(diagnosis))
samp
View(samp)
samp <- data.frame(gene_expressions=gene_expressions[1, ], diagnosis=diagnosis, row.names = 'feature')
samp <- data.frame(diagnosis=diagnosis, gene_expressions=gene_expressions[1, ])
samp
View(samp)
samp$diagnosis
samp$gene_expressions
gene_expressions[1, ]
as.vector(gene_expressions[1, ])
samp <- data.frame(diagnosis=diagnosis, gene_expressions=as.vector(gene_expressions[1, ]))
View(samp)
lm(samp ~ as.factor(diagnosis))
typeof(samp)
lm(as.data.frame(samp) ~ as.factor(diagnosis))
str(samp)
do.call(rbind.data.frame, samp)
samp
typeof(samp)
samp <- do.call(rbind.data.frame, samp)
typeof(samp)
View(samp)
lm(as.data.frame(samp) ~ as.factor(diagnosis))
samp <- data.frame(matrix(unlist(as.vector(gene_expressions[1,]))))
samp
View(samp)
samp <- data.frame(diagnosis = matrix(unlist(diagnosis)), expressions = matrix(unlist(as.vector(gene_expressions[1,]))))
samp
View(samp)
typeof(samp)
matrix(unlist(samp
))
samp <- data.frame(diagnosis=diagnosis, gene_expressions=as.vector(gene_expressions[1, ]))
samp <- matrix(unlist(samp))
samp <- data.frame(diagnosis=diagnosis, gene_expressions=as.vector(gene_expressions[1, ]))
print(matrix(samp))
View(matrix(samp))
help(data.frame)
??data.frame
lm(as.vector(gene_expressions[1,]) ~ as.factor(diagnosis))
as.vector(gene_expressions)
as.vector(gene_expressions[1, ])
# Get expressions
# 22011 x 169
gene_expressions <- exprs(e)
data <- as.data.frame(gene_expressions)
selected <- genefilter(data, ff)
# Cuts it down to 55 x 169
data_genefilter <- data[which(selected), ]
# ANOVA
# Foreach
df <- data.frame(diagnosis = diagnosis, expressions = as.vector(gene_expressions))
model <- lm(df ~ as.factor(diagnosis), data = data)
model <- lm(as.vector(gene_expressions) ~ as.factor(diagnosis), data = data)
as.vector(data_genefilter)
genefilter(as.vector(data), ff)
genefilter(as.vector(gene_expressions), ff)
View(as.vector(data_genefilter))
length(data_genefilter)
View(data_genefilter)
rowNames(data_genefilter)
rowName(data_genefilter)
rownames(e)
rownames(data_genefilter)
# ANOVA
diagnosis.fact <- as.factor(diagnosis)
feature.fact <- function(features) {
for(features in f) {
print(f)
}
}
feature.fact(rownames(data_genefilter))
feature.fact <- function(data) {
for(feature in rownames(data)) {
print(feature)
}
}
feature.fact(data_genefilter)
feature.fact <- function(data) {
rep(rownames(data), ncol(data))
}
feature.fact(data_genefilter)
rep(rownames(data), each = ncol(data))
feature.fact <- function(data) {
as.factor(rep(rownames(data), each = ncol(data)))
}
feature.fact(data_genefilter)
typeof(data_genefilter)
samp <- data_genefilter
colnames(samp) <- NULL
samp
View(samp)
samp[-1, ]
View(samp[-1, ])
as.numeric(samp)
unname(unlist(samp))
View(unname(unlist(samp)))
sample.fact <- gl(ncol(data), 1, ncol(data)*nrows(data))
sample.fact <- gl(ncol(data), 1, ncol(data)*nrow(data))
sample.fact
sample.fact <- gl(ncol(data), ncol(data), ncol(data)*nrow(data))
sample.fact
feature.fact()
feature.fact
feature.fact <- as.factor(rep(rownames(data), each = ncol(data)))
feature.fact
sample.fact <- gl(ncol(data), 1, ncol(data)*nrow(data))
remove(sample.fact)
# ANOVA
patient.fact <- gl(ncol(data), 1, ncol(data)*nrow(data))
patient.fact
feature.fact <- as.factor(rep(rownames(data), each = ncol(data)))
diagnosis.fact <- as.factor(diagnosis)
data_genefilter.vector <- unname(unlist(samp))
model <- lm(data_genefilter.vector ~ diagnosis.fact + patient.fact + feature.fact, data = data_genefilter)
length(data_genefilter.vector)
length(patient.fact)
rep(diagnosis, each = 169)
rep(diagnosis, each = 1)
rep(diagnosis, each = 2)
feature.fact
help(replicate)
rep(diagnosis, 3)
# ANOVA
data_genefilter.vector <- unname(unlist(samp))
# ANOVA
data_genefilter.vector <- unname(unlist(data_genefilter))
data_genefilter.vector
patient.fact <- gl(ncol(data_genefilter.vector), 1, ncol(data_genefilter.vector)*nrow(data_genefilter.vector))
patient.fact <- gl(ncol(data_genefilter), 1, ncol(data_genefilter)*nrow(data_genefilter))
feature.fact <- as.factor(rep(rownames(data_genefilter), each = ncol(data_genefilter)))
diagnosis.fact <- as.factor(rep(diagnosis, nrow(data_genefilter)))
model <- lm(data_genefilter.vector ~ diagnosis.fact + patient.fact + feature.fact, data = data_genefilter)
residuals <- residuals(model)
# Check for normality
shapiro.test(residuals)
length(residuals)
length(sample(residuals, 5000)
)
# Check for normality
shapiro.test(sample(residuals, 5000))
# Check for constancy of variance
library(lmtest)
bptest(model, studentize = FALSE)
# Check for independence
gene_expressions <- 1:ncol(data_genefilter)
plot(gene_expressions, residuals)
dim(residuals)
residuals
# Check for independence
gene_expressions <- 1:length(data_genefilter.vector)
plot(gene_expressions, residuals)
# ANOVA
res.aov <- aov(data_genefilter.vector ~ diagnosis.fact + patient.fact + feature.fact)
summary(res.aov)
# ANOVA
res.aov <- aov(data_genefilter.vector ~ diagnosis.fact)
summary(res.aov)
model <- lm(data_genefilter.vector ~ diagnosis.fact + feature.fact, data = data_genefilter)
residuals <- residuals(model)
# Check for independence
gene_expressions <- 1:length(data_genefilter.vector)
plot(gene_expressions, residuals)
# Check for normality
shapiro.test(sample(residuals, 5000))
# Check for constancy of variance
library(lmtest)
bptest(model, studentize = FALSE)
# ANOVA
res.aov <- aov(data_genefilter.vector ~ diagnosis.fact + patient.fact + feature.fact)
# ANOVA
res.aov <- aov(data_genefilter.vector ~ diagnosis.fact)
summary(res.aov)
TukeyHSD(res.aov)
BiocManager::install(c("affy", "caret", "genefilter", "locfit", "oligo", "pd.huex.1.0.st.v2", "BiocGenerics", "wavelets"), force = TRUE, lib = paste(basedir, "lib", sep = ""))
### Create training and test llcp2020 dataset
library(caret)
### Create training and test llcp2020 dataset
library(caret, lib.loc = paste(basedir, "lib", sep = ""))
BiocManager::install(c("ggplot"), force = TRUE, lib = paste(basedir, "lib", sep = ""))
install.packages("ggplot", force = TRUE, lib = paste(basedir, "lib", sep = ""))
BiocManager::install(c("ggplot2"), force = TRUE, lib = paste(basedir, "lib", sep = ""))
### Create training and test llcp2020 dataset
library(caret, lib.loc = paste(basedir, "lib", sep = ""))
### Create training and test llcp2020 dataset
library(ggplot2, lib.loc = paste(basedir, "lib", sep = ""))
### Create training and test llcp2020 dataset
library(ggplot2, lib.loc = paste(basedir, "lib", sep = ""))
install.packages("ggplot2", force = TRUE, lib = paste(basedir, "lib", sep = ""))
install.packages("ggplot2", force = TRUE, lib = paste(basedir, "lib", sep = ""))
### Create training and test llcp2020 dataset
library(ggplot2, lib.loc = paste(basedir, "lib", sep = ""))
BiocManager::install(c("withr"), force = TRUE, lib = paste(basedir, "lib", sep = ""))
### Create training and test llcp2020 dataset
library(ggplot2, lib.loc = paste(basedir, "lib", sep = ""))
library(caret, lib.loc = paste(basedir, "lib", sep = ""))
### Create training and test llcp2020 dataset
library(withr, lib.loc = paste(basedir, "lib", sep = ""))
library(ggplot2, lib.loc = paste(basedir, "lib", sep = ""))
library(caret, lib.loc = paste(basedir, "lib", sep = ""))
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
set.seed(100)
index <- createDataPartition(data_genefilter, p=0.75, list = F)
index <- createDataPartition(diagnosis, p=0.75, list = F)
trainset <- llcp2020[index, ]
trainset <- data_genefilter[index, ]
testset <- data_genefilter[-index, ]
trainset
### Logistic Regression
library(e1071)
BiocManager::install(c("e1071"), force = TRUE, lib = paste(basedir, "lib", sep = ""))
### Logistic Regression
library(e1071, lib.loc = paste(basedir, "lib", sep = ""))
trainset
rownames(trainset) <- diagnosis
colnames(trainset) <- diagnosis
trainset
col(data)
modellogit <- glm(col(trainset) ~ ., family = binomial(link = "logit"), data = trainset)
modellogit <- glm(col(trainset, as.factor = TRUE) ~ ., family = binomial(link = "logit"), data = trainset)
trainset <- data_genefilter[index, ]
testset <- data_genefilter[-index, ]
print(rbind(trainset, diagnosis))
View(rbind(trainset, diagnosis))
diagnosis
View(rbind(as.matrix(trainset), diagnosis))
typeof(trainset)
typeof(diagnosis)
diagnosis
View(rbind(as.matrix(trainset), as.list(diagnosis)))
as.list(diagnosis)
as.array(diagnosis)
View(rbind(as.matrix(trainset), as.array(diagnosis)))
trainset <- data_genefilter[index, ]
View(rbind(as.matrix(trainset), as.array(diagnosis)))
l
list(diagnosis)
is.list(diagnosis)
is.list(as.list(diagnosis))
View(rbind(as.matrix(trainset), as.list(diagnosis)))
trainset[nrow(trainset) + 1, ] <- diagnosis
trainset
View(trainset)
trainset <- data_genefilter[index, ]
trainset[nrow(trainset) + 1, ] <- diagnosis
trainset <- data_genefilter[index, ]
View(trainset)
indesx
index
index <- createDataPartition(diagnosis, p=0.75, list = F)
index
colnames(data_genefilter)
rownames(data_genefilter)
index <- createDataPartition(rownames(data_genefilter), p=0.75, list = F)
index
index <- createDataPartition(data_genefilter[rownames(data_genefilter),], p=0.75, list = F)
data_genefilter[rownames(data_genefilter),]
typeof(rownames(data_genefilter))
as.array(rownames(data_genefilter))
index <- createDataPartition(as.array(rownames(data_genefilter)), p=0.75, list = F)
df <- data_genefilter
df[nrow(df) + 1,] <- diagnosis
df
View(df)
colnames(df[nrow(df),])
rownames(df[nrow(df),])
rownames(df[nrow(df),]) <- 'diagnosis'
rownames(df)[nrow(df)] <- 'diagnosis'
View(df)
index <- createDataPartition(data_genefilter$diagnosis, p=0.75, list = F)
index <- createDataPartition(as.data.frame(data_genefilter$diagnosis), p=0.75, list = F)
View(as.data.frame(df))
df$diagnosis
df['diagnosis', ]
index <- createDataPartition(df['diagnosis',], p=0.75, list = F)
index
df['diagnosis',]
df['diagnosis',] <- diagnosis.fact
df['diagnosis',] <- as.factor(diagnosis)
as.factor(df['diagnosis', ])
df['diagnosis',]
index <- createDataPartition(df['diagnosis',], p=0.75, list = F)
trainset <- data_genefilter[index, ]
transform_position(trainset)
View(transform_position(trainset))
transform(df)
df
View(df)
data[, 1]
data[, 0]
data[, 2]
data[, 1]
data[, 2]
diagnosis[diagnosis == "SCZ"]
diagnosis[diagnosis != "CTL"]
withDisorder <- diagnosis
# Factor non-control to DIS which means disorder
withDisorder[withDisorder != "CTL"] <- "DIS"
withDisorder
withDisorder.fac <- as.factor(withDisorder)
withDisorder.fac
library(genefilter, lib.loc = paste(basedir, "lib", sep = ""), attach.required = TRUE)
# Normal distribution
f1 <- function(x) (shapiro.test(x)$p.value > alpha)
# Variability
f2 <- function(x) (sd(x)/abs(mean(x)) < 0.1)
# T-Test
f3 <- function(x) (t.test(x ~ withDisorder)$p.value > alpha)
ff <- filterfun(f1,f2,f3)
selected <- genefilter(data, ff)
# Dimension reduction
# Gene filtering
alpha <- 0.001
ff <- filterfun(f1,f2,f3)
selected <- genefilter(data, ff)
# Cuts it down to 55 x 169
data_genefilter <- data[which(selected), ]
remove(f4, f5, f6)
head(data_genefilter)
print(dim(data_genefilter))
remove(df, df_genefilter)
print(dim(gene_expressions))
print(dim(data))
print(rbind(c('expressions', 'samples'), dim(data)))
print(as.matrix(rbind(c('expressions', 'samples'), dim(data))))
print("After RMA: ", dim(data))
print(paste("After RMA: ", dim(data)))
print(paste(c("a", "b"), dim(data)))
print(paste(c("Expressions: ", "Samples: "), dim(data), sep = " "))
print(as.string(paste(c("Expressions: ", "Samples: "), dim(data))))
print(paste(c("Expressions: ", "Samples: "), dim(data), collapse = " "))
print(paste("After RMA: ", paste(c("Expressions: ", "Samples: "), dim(data), collapse = " ")))
help(paste)
print(paste("After RMA: ", paste(c("Expressions: ", "Samples: "), dim(data_genefilter), collapse = " ")))
print(paste("After gene filter: ", paste(c("Expressions: ", "Samples: "), dim(data_genefilter), collapse = " ")))
# ANOVA
data_genefilter.vector <- unname(unlist(data_genefilter))
patient.fact <- gl(ncol(data_genefilter), 1, ncol(data_genefilter)*nrow(data_genefilter))
feature.fact <- as.factor(rep(rownames(data_genefilter), each = ncol(data_genefilter)))
diagnosis.fact <- as.factor(rep(diagnosis, nrow(data_genefilter)))
model <- lm(data_genefilter.vector ~ diagnosis.fact + feature.fact, data = data_genefilter)
# Check for independence
gene_expressions <- 1:length(data_genefilter.vector)
res.aov$coefficients
res.aov
# Dimension reduction
# Gene filtering
alpha <- 0.0001
# Normal distribution
f1 <- function(x) (shapiro.test(x)$p.value > alpha)
# Variability
f2 <- function(x) (sd(x)/abs(mean(x)) < 0.1)
# T-Test
f3 <- function(x) (t.test(x ~ withDisorder)$p.value > alpha)
ff <- filterfun(f1,f2,f3)
selected <- genefilter(data, ff)
# Dimension reduction
# Gene filtering
alpha <- 0.000001
# Normal distribution
f1 <- function(x) (shapiro.test(x)$p.value > alpha)
# Variability
f2 <- function(x) (sd(x)/abs(mean(x)) < 0.1)
# T-Test
f3 <- function(x) (t.test(x ~ withDisorder)$p.value > alpha)
ff <- filterfun(f1,f2,f3)
selected <- genefilter(data, ff)
# T-Test
f3 <- function(x) (t.test(x ~ withDisorder)$p.value < alpha)
ff <- filterfun(f1,f2,f3)
selected <- genefilter(data, ff)
# Cuts it down to 55 x 169
data_genefilter <- data[which(selected), ]
# Dimension reduction
# Gene filtering
alpha <- 0.001
# Normal distribution
f1 <- function(x) (shapiro.test(x)$p.value > alpha)
# Variability
f2 <- function(x) (sd(x)/abs(mean(x)) < 0.1)
# T-Test
f3 <- function(x) (t.test(x ~ withDisorder)$p.value < alpha)
ff <- filterfun(f1,f2,f3)
selected <- genefilter(data, ff)
# Cuts it down to 55 x 169
data_genefilter <- data[which(selected), ]
print(paste("After gene filter: ", paste(c("Expressions: ", "Samples: "), dim(data_genefilter), collapse = " ")))
rownames(data_genefilter)
# ANOVA
data_genefilter.vector <- unname(unlist(data_genefilter))
patient.fact <- gl(ncol(data_genefilter), 1, ncol(data_genefilter)*nrow(data_genefilter))
feature.fact <- as.factor(rep(rownames(data_genefilter), each = ncol(data_genefilter)))
diagnosis.fact <- as.factor(rep(diagnosis, nrow(data_genefilter)))
model <- lm(data_genefilter.vector ~ diagnosis.fact)
residuals <- residuals(model)
# Check for independence
gene_expressions <- 1:length(data_genefilter.vector)
plot(gene_expressions, residuals)
# Check for normality
shapiro.test(sample(residuals, 5000))
# Check for normality
shapiro.test(residuals)
# Check for constancy of variance
library(lmtest)
bptest(model, studentize = FALSE)
# ANOVA
res.aov <- aov(data_genefilter.vector ~ diagnosis.fact)
summary(res.aov)
TukeyHSD(res.aov)
