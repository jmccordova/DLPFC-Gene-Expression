library(S4Vectors, lib.loc = package_loc)
library(IRanges, lib.loc = package_loc)
library(XVector, lib.loc = package_loc)
library(GenomeInfoDb, lib.loc = package_loc)
library(Biostrings, lib.loc = package_loc)
library(BiocGenerics, lib.loc = package_loc)
library(oligoClasses, lib.loc = package_loc)
library(memoise, lib.loc = package_loc)
library(pd.huex.1.0.st.v2, lib.loc = package_loc)
library(oligo, lib.loc = package_loc, attach.required = TRUE)
library(caret, lib.loc = package_loc)
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc)
library(idm, lib.loc = package_loc)
library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc)
library(FactoMineR, lib.loc = package_loc)
library(pROC, lib.loc = package_loc)
# Step 3.1.5.5: Apply Incremental PCA (PCA itself cannot work with this big dataset)
# data.pca <- i_pca(data1 = cov_matrix[1:nrow(cov_matrix)/2,], data2 = cov_matrix[nrow(cov_matrix) + 1:nrow(cov_matrix),])
# data.pca <- prcomp_irlba(data, scale = TRUE, center = TRUE)
data.pca <- pca(data, removeVar = 0.1)
rownames(data)
help(mapIds)
summary(data.pca)
summary(data.pca$loadings)
BiocManager::install(
c("affy", "caret", "e1071", "genefilter", "ggplot2", "locfit", "nnet", "oligo",
"pd.huex.1.0.st.v2", "BiocGenerics", "withr", "corrr", "idm", "irlba", "PCAtools", "FactoMineR", "pROC"),
force = TRUE, dependencies = TRUE, lib = package_loc
)
library(Biobase, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc)
library(IRanges, lib.loc = package_loc)
library(XVector, lib.loc = package_loc)
library(GenomeInfoDb, lib.loc = package_loc)
library(Biostrings, lib.loc = package_loc)
library(BiocGenerics, lib.loc = package_loc)
library(oligoClasses, lib.loc = package_loc)
library(memoise, lib.loc = package_loc)
library(pd.huex.1.0.st.v2, lib.loc = package_loc)
library(oligo, lib.loc = package_loc, attach.required = TRUE)
library(caret, lib.loc = package_loc)
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc)
library(idm, lib.loc = package_loc)
library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc)
library(FactoMineR, lib.loc = package_loc)
library(pROC, lib.loc = package_loc)
library(airway)
BiocManager::install(
c("airway"),
force = TRUE, dependencies = TRUE, lib = package_loc
)
library(airway)
library(airway, lib.loc = package.log)
library(airway, lib.loc = package_loc)
data("airway")
View(airway)
View(data)
??mapIds
remove(airway)
data("airway")
View(airway)
colData(airway)
library(PCAtools, lib.loc = package_loc)
# Show the loadings
plotloadings(data.pca, labSize = 3)
# Step 3.1.5.5: Apply Incremental PCA (PCA itself cannot work with this big dataset)
# data.pca <- i_pca(data1 = cov_matrix[1:nrow(cov_matrix)/2,], data2 = cov_matrix[nrow(cov_matrix) + 1:nrow(cov_matrix),])
# data.pca <- prcomp_irlba(data, scale = TRUE, center = TRUE)
data.t <- t(data)
View(data.t)
data.pca <- pca(data.t, removeVar = 0.1)
summary(data.pca)
# Show the loadings
plotloadings(data.pca, labSize = 3)
screeplot(data.pca, metadata = rownames(data.t), axisLabSize = 18, titleLabSize = 22)
screeplot(data.pca, axisLabSize = 18, titleLabSize = 22)
biplot(data.pca, showLoadings = TRUE,
labSize = 5, pointSize = 5, sizeLoadingsNames = 5)
summary(data.pca)
# Show the loadings
plotloadings(data.pca, labSize = 3)
# Show the loadings
plotloadings(data.pca)
# Show the loadings
plotloadings(data.pca, labSize = 3)
# Show the loadings
plotloadings(data.pca, labSize = 3)
data("pmSequence")
View(pmSequence)
pmSequence
remove(pmSequence)
BiocManager::install(
c("affy", "caret", "e1071", "genefilter", "ggplot2", "locfit", "nnet", "oligo",
"pd.huex.1.0.st.v2", "BiocGenerics", "withr", "corrr", "idm", "irlba", "PCAtools",
"biomart", "FactoMineR", "pROC"),
force = TRUE, dependencies = TRUE, lib = package_loc
)
remove(airway)
# Part 1.1: Sets the location of the data to be used and where the packages should be put
datadir <- "E:/jmcco/Downloads/BNF 300.2 Data/GSE208338_RAW/"
probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/Affymetrix_HuEx/"
setwd(datadir)
package_loc <- paste(datadir, "lib", sep = "")
# Part 1.2: Package and library installations
# Bioconductor Installation
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", lib = package_loc)
BiocManager::install(
c("tzdb", "vroom", "readr", "affy", "caret", "e1071", "genefilter", "ggplot2", "locfit", "nnet", "oligo",
"pd.huex.1.0.st.v2", "BiocGenerics", "withr", "corrr", "idm", "irlba", "PCAtools",
"biomaRt", "FactoMineR", "pROC"),
force = TRUE, dependencies = TRUE, lib = package_loc
)
library(Biobase, lib.loc = package_loc)
library(tzdb, lib.loc = package_loc)
library(vroom, lib.loc = package_loc)
library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc)
library(IRanges, lib.loc = package_loc)
library(XVector, lib.loc = package_loc)
library(GenomeInfoDb, lib.loc = package_loc)
library(Biostrings, lib.loc = package_loc)
library(BiocGenerics, lib.loc = package_loc)
library(oligoClasses, lib.loc = package_loc)
library(memoise, lib.loc = package_loc)
library(pd.huex.1.0.st.v2, lib.loc = package_loc)
library(oligo, lib.loc = package_loc, attach.required = TRUE)
library(caret, lib.loc = package_loc)
library(idm, lib.loc = package_loc)
library(irlba, lib.loc = package_loc)
library(FactoMineR, lib.loc = package_loc)
library(pROC, lib.loc = package_loc)
# Part 2.3: Get probe IDs
ensemblIDs <- read_tsv(paste(probedir, 'Affymetrix_HuEx_microarray_probeset_IDs_to_Ensemble_IDs.tsv', sep = ''))
# Part 2.4: Get unique gene IDs
geneIDs <- ensemblIDs[c('id_internal_huex', 'gene_name')]
geneIDs <- geneIDs[!duplicated(geneIDs$id_internal_huex), ]
data.pca.metadata <- matrix(c(geneIDs$id_internal_huex, geneIDs$gene_name), nrow = 2, ncol = nrow(geneIDs), byrow = TRUE)
data.pca.metadata <- data.frame(data.pca.metadata)
names(data.pca.metadata) <- data.pca.metadata[1, ]
data.pca.metadata <- data.pca.metadata[-1, ]
View(data.t)
data.t <- data.frame(data.t)
View(data.t)
# Step 3.1.5.5: Apply Incremental PCA (PCA itself cannot work with this big dataset)
# data.pca <- i_pca(data1 = cov_matrix[1:nrow(cov_matrix)/2,], data2 = cov_matrix[nrow(cov_matrix) + 1:nrow(cov_matrix),])
# data.pca <- prcomp_irlba(data, scale = TRUE, center = TRUE)
data.t <- data.frame(t(data))
# Rename the probe IDs to gene names
# geneIDs[geneIDs$id_internal_huex %in% rownames(data.t), ]
data.pca <- pca(data.t, metadata = data.pca.metadata, removeVar = 0.1)
library(PCAtools, lib.loc = package_loc)
library(biomaRt, lib.loc = package_loc)
# Rename the probe IDs to gene names
# geneIDs[geneIDs$id_internal_huex %in% rownames(data.t), ]
data.pca <- pca(data.t, metadata = data.pca.metadata, removeVar = 0.1)
View(data.pca.metadata)
geneIDs[colnames(data.pca.metadata) %in% rownames(geneIDs), ]
geneIDs[geneIDs$id_internal_huex %in% rownames(data.t), ]
data.pca.metadata[, intersect(rownames(data.t), colnames(data.pca.metadata))]
count(data.pca.metadata[, intersect(rownames(data.t), colnames(data.pca.metadata))])
nrow(data.pca.metadata[, intersect(rownames(data.t), colnames(data.pca.metadata))])
ncol(data.pca.metadata[, intersect(rownames(data.t), colnames(data.pca.metadata))])
ncol(data.pca.metadata)
ncol(data.pca.metadata[, rownames(data.t)])
ncol(data.pca.metadata[, colnames(data.pca.metadata) %in% rownames(data.t)])
# Rename the probe IDs to gene names
# geneIDs[geneIDs$id_internal_huex %in% rownames(data.t), ]
data.pca <- pca(data.t, metadata = data.pca.metadata[, intersect(rownames(data.t), colnames(data.pca.metadata))], removeVar = 0.1)
geneIDs <- geneIDs[rownames(geneIDs) %in% colnames(data), ]
colnames(data)
# Part 2.4: Get unique gene IDs
geneIDs <- ensemblIDs[c('id_internal_huex', 'gene_name')]
rownames(geneIDs)
geneIDs <- geneIDs[!duplicated(geneIDs$id_internal_huex), ]
geneIDs <- geneIDs[geneIDs$id_internal_huex %in% colnames(data), ]
data.pca.metadata <- matrix(c(geneIDs$id_internal_huex, geneIDs$gene_name), nrow = 2, ncol = nrow(geneIDs), byrow = TRUE)
View(geneIDs)
View(data)
# Part 2.4: Get unique gene IDs
geneIDs <- ensemblIDs[c('id_internal_huex', 'gene_name')]
duplicated(colnames(data))
geneIDs <- geneIDs[geneIDs$id_internal_huex %ni% colnames(data), ]
colnames(data)
colnames(data) %in% ensemblIDs$id_internal_huex
colnames(data) %in% ensemblIDs$id_internal_huex == TRUE
View(ensemblIDs)
View(ensemblIDs)
colnames(data) %in% ensemblIDs$probesets.id_internal_huex
which(colnames(data) %in% ensemblIDs$probesets.id_internal_huex == TRUE)
geneIDs <- geneIDs[intersect(geneIDs$id_internal_huex, colnames(data)), ]
# Part 2.4: Get unique gene IDs
geneIDs <- ensemblIDs[c('id_internal_huex', 'gene_name')]
geneIDs <- geneIDs[!duplicated(geneIDs$id_internal_huex), ]
geneIDs <- geneIDs[geneIDs$id_internal_huex %in% colnames(data), ]
View(geneIDs)
View(ensemblIDs)
# Part 2.4: Get unique gene IDs
transcriptIDs <- ensemblIDs[c('id_internal_huex', 'transcript_id')]
transcriptIDs <- transcriptIDs[!duplicated(transcriptIDs$id_internal_huex), ]
# Retain only the genes which probeset ID are found in the DLPFC dataset
transcriptIDs <- transcriptIDs[transcriptIDs$id_internal_huex %in% colnames(data), ]
View(transcriptIDs)
remove(geneIDs)
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- data[colnames(data) %ni% transcriptIDs$id_internal_huex, ]
View(transcriptIDs.missing)
View(transcriptIDs.missing)
transcriptIDs.missing <- data.frame(c(colnames('transcriptIDs.missing'), colnames('transcriptIDs.missing')))
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- data[colnames(data) %ni% transcriptIDs$id_internal_huex, ]
data.frame(c(colnames(transcriptIDs.missing), colnames(transcriptIDs.missing)))
transcriptIDs.missing <- data.frame(c(colnames(transcriptIDs.missing), colnames(transcriptIDs.missing)))
View(transcriptIDs.missing)
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- data.frame(colnames(data) %ni% transcriptIDs$id_internal_huex)
View(transcriptIDs.missing)
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- data.frame(colnames(data)[colnames(data) %ni% transcriptIDs$id_internal_huex))
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- data.frame(colnames(data)[colnames(data) %ni% transcriptIDs$id_internal_huex])
View(transcriptIDs.missing)
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- colnames(data)[colnames(data) %ni% transcriptIDs$id_internal_huex]
transcriptIDs.missing <- matrix(c(transcriptIDs.missing, transcriptIDs.missing))
View(transcriptIDs.missing)
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- colnames(data)[colnames(data) %ni% transcriptIDs$id_internal_huex]
transcriptIDs.missing <- matrix(c(transcriptIDs.missing, transcriptIDs.missing), nrow = nrow(transcriptIDs), ncol = 2, byrow = TRUE)
transcriptIDs.missing <- matrix(c(transcriptIDs.missing, transcriptIDs.missing), nrow = nrow(transcriptIDs), ncol = 2)
transcriptIDs.missing <- matrix(c(transcriptIDs.missing, transcriptIDs.missing), ncol = 2, byrow = TRUE)
View(transcriptIDs.missing)
transcriptIDs <- rbind(transcriptIDs, transcriptIDs.missing)
View(transcriptIDs.missing)
View(transcriptIDs)
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- colnames(data)[colnames(data) %ni% transcriptIDs$id_internal_huex]
transcriptIDs.missing <- data.frame(matrix(c(transcriptIDs.missing, transcriptIDs.missing), ncol = 2, byrow = TRUE))
names(transcriptIDs.missing) <- c('id_internal_huex', 'transcript_id')
View(transcriptIDs.missing)
View(transcriptIDs.missing)
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- colnames(data)[colnames(data) %ni% transcriptIDs$id_internal_huex]
transcriptIDs.missing <- data.frame(matrix(c(transcriptIDs.missing, transcriptIDs.missing), ncol = 2))
names(transcriptIDs.missing) <- c('id_internal_huex', 'transcript_id')
View(transcriptIDs.missing)
transcriptIDs <- rbind(transcriptIDs, transcriptIDs.missing)
View(transcriptIDs)
remove(transcriptsIDs.missing)
remove(transcriptIDs.missing)
data.pca.metadata <- matrix(c(transcriptIDs$id_internal_huex, transcriptIDs$transcript_id), nrow = 2, ncol = nrow(geneIDs), byrow = TRUE)
data.pca.metadata <- matrix(c(transcriptIDs$id_internal_huex, transcriptIDs$transcript_id), nrow = 2, ncol = nrow(transcriptIDs), byrow = TRUE)
data.pca.metadata <- data.frame(data.pca.metadata)
View(data.pca.metadata)
names(data.pca.metadata) <- data.pca.metadata[1, ]
data.pca.metadata <- data.pca.metadata[-1, ]
View(data.pca.metadata)
# Step 3.1.5.5: Apply Incremental PCA (PCA itself cannot work with this big dataset)
# data.pca <- i_pca(data1 = cov_matrix[1:nrow(cov_matrix)/2,], data2 = cov_matrix[nrow(cov_matrix) + 1:nrow(cov_matrix),])
# data.pca <- prcomp_irlba(data, scale = TRUE, center = TRUE)
data.t <- data.frame(t(data))
# Rename the probe IDs to gene names
# geneIDs[geneIDs$id_internal_huex %in% rownames(data.t), ]
# data.pca.metadata[, intersect(rownames(data.t), colnames(data.pca.metadata))]
data.pca <- pca(data.t, metadata = data.pca.metadata, removeVar = 0.1)
all(rownames(data.t) %in% colnames(data.pca.metadata))
all(rownames(data.t) == colnames(data.pca.metadata))
which(rownames(data.t) != colnames(data.pca.metadata))
View(data.pca.metadata)
View(data.t)
View(data.pca.metadata)
library(dplyr)
transcriptIDs <- arrange(transcriptIDs, 'id_internal_huex')
View(transcriptIDs)
View(data.t)
transcriptIDs <- arrange(transcriptIDs, 'id_internal_huex')
remove(transcriptIDs.missing)
data.pca.metadata <- matrix(c(transcriptIDs$id_internal_huex, transcriptIDs$transcript_id), nrow = 2, ncol = nrow(transcriptIDs), byrow = TRUE)
data.pca.metadata <- data.frame(data.pca.metadata)
names(data.pca.metadata) <- data.pca.metadata[1, ]
data.pca.metadata <- data.pca.metadata[-1, ]
View(data.pca.metadata)
View(data.t)
View(data.t)
data.pca.metadata$2315554
data.pca.metadata$'2315554'
data.pca.metadata['2315554', ]
data.pca.metadata[,'2315554']
View(transcriptIDs)
transcriptIDs <- rbind(transcriptIDs, transcriptIDs.missing)
transcriptIDs <- arrange(transcriptIDs, id_internal_huex)
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- colnames(data)[colnames(data) %ni% transcriptIDs$id_internal_huex]
transcriptIDs.missing <- data.frame(matrix(c(transcriptIDs.missing, transcriptIDs.missing), ncol = 2))
names(transcriptIDs.missing) <- c('id_internal_huex', 'transcript_id')
transcriptIDs <- rbind(transcriptIDs, transcriptIDs.missing)
transcriptIDs <- arrange(transcriptIDs, id_internal_huex)
remove(transcriptIDs.missing)
# Part 2.4: Get unique gene IDs
transcriptIDs <- ensemblIDs[c('id_internal_huex', 'transcript_id')]
transcriptIDs <- transcriptIDs[!duplicated(transcriptIDs$id_internal_huex), ]
# Retain only the genes which probeset ID are found in the DLPFC dataset
transcriptIDs <- transcriptIDs[transcriptIDs$id_internal_huex %in% colnames(data), ]
# Combine the probeIDs from DLPFC dataset that have no gene IDs
transcriptIDs.missing <- colnames(data)[colnames(data) %ni% transcriptIDs$id_internal_huex]
transcriptIDs.missing <- data.frame(matrix(c(transcriptIDs.missing, transcriptIDs.missing), ncol = 2))
names(transcriptIDs.missing) <- c('id_internal_huex', 'transcript_id')
transcriptIDs <- rbind(transcriptIDs, transcriptIDs.missing)
transcriptIDs <- arrange(transcriptIDs, id_internal_huex)
remove(transcriptIDs.missing)
View(data.pca.metadata)
View(transcriptIDs)
data.pca.metadata <- matrix(c(transcriptIDs$id_internal_huex, transcriptIDs$transcript_id), nrow = 2, ncol = nrow(transcriptIDs), byrow = TRUE)
data.pca.metadata <- data.frame(data.pca.metadata)
names(data.pca.metadata) <- data.pca.metadata[1, ]
data.pca.metadata <- data.pca.metadata[-1, ]
View(data.pca.metadata)
# Rename the probe IDs to gene names
# geneIDs[geneIDs$id_internal_huex %in% rownames(data.t), ]
# data.pca.metadata[, intersect(rownames(data.t), colnames(data.pca.metadata))]
all(rownames(data.t) %in% colnames(data.pca.metadata))
all(rownames(data.t) == colnames(data.pca.metadata))
data.pca <- pca(data.t, metadata = data.pca.metadata, removeVar = 0.1)
names(data.t)
rownames(data.t)
transcriptIDs$transcript_id[match(rownames(data.t))]
rownames(data.t)
transcriptIDs$transcript_id[match(rownames(data.t))]
transcriptIDs$transcript_id[match(rownames(data.t)), ]
transcriptIDs$transcript_id[match(row.names(data.t))]
transcriptIDs$transcript_id[match(rownames(data))]
help(match)
match(rownames(data.t), transcriptIDs$transcript_id)
rownames(data.t) <- transcriptIDs$transcript_id[match(rownames(data.t), transcriptIDs$id_internal_huex)]
View(ensemblIDs)
# Step 3.1.5.5.3: Perform PCA
#data.pca <- pca(data.t, metadata = data.pca.metadata, removeVar = 0.1)
data.pca <- pca(data.t, removeVar = 0.1)
# Get the PCs with that can explain at least 50% of the variability
print(sum(data.pca$variance[data.pca$variance > 2]))
data.important <- data.pca$loadings[, which(data.pca$variance > 2)]
# Show the loadings
plotloadings(data.pca, labSize = 3)
data.important <- data.pca$loadings[, which(data.pca$variance > 2)]
# Show the loadings
plotloadings(data.pca, labSize = 3)
# Show the loadings
plotloadings(data.pca, labSize = 3, max.overlaps = 500)
# Step 3.1.5.5.3: Perform PCA
#data.pca <- pca(data.t, metadata = data.pca.metadata, removeVar = 0.1)
data.pca <- pca(data.t, removeVar = 0.1, max.overlaps = Inf)
help(plotloadings)
data.pca <- pca(data.t, metadata = data.pca.metadata, removeVar = 0.1)
#rownames(data.t) <- transcriptIDs$transcript_id[match(rownames(data.t), transcriptIDs$id_internal_huex)]
# Step 3.1.5.5.2: Check if the data rows and metadata columns match names
all(rownames(data.t) %in% colnames(data.pca.metadata))
all(rownames(data.t) == colnames(data.pca.metadata))
install.packages("writexl")
library(writexl)
write_xlsx(data.t, paste(datadir, "data.t.xlsx", sep = ""))
write_xlsx(data.pca.metadata, paste(datadir, "data.pca.metadata.xlsx", sep = ""))
write.csv(data.pca.metadata, paste(datadir, "data.pca.metadata.xlsx", sep = ""), row.names = TRUE)
write.csv(data.t, paste(datadir, "data.t.csv", sep = ""), row.names = TRUE)
write.csv(data.pca.metadata, paste(datadir, "data.pca.metadata.csv", sep = ""), row.names = TRUE)
data.important
# Show the loadings
plotloadings(data.pca, labSize = 3)
# Show the loadings
plotloadings(data.pca, labSize = 3)
screeplot(data.pca, axisLabSize = 18, titleLabSize = 22)
help(screeplot)
biplot(data.pca, showLoadings = TRUE,
labSize = 5, pointSize = 5, sizeLoadingsNames = 5)
fviz_cos2(data.pca, choice = "var", axes = 1:2)
BiocManager::install(
c("tzdb", "vroom", "readr", "affy", "caret", "e1071", "genefilter", "ggplot2", "locfit", "nnet", "oligo",
"pd.huex.1.0.st.v2", "BiocGenerics", "withr", "corrr", "idm", "irlba", "PCAtools", "factoextra",
"biomaRt", "FactoMineR", "pROC"),
force = TRUE, dependencies = TRUE, lib = package_loc
)
library(factoextra, lib.loc = package_loc)
fviz_cos2(data.pca, choice = "var", axes = 1:2)
res.ca <- CA(data.t, graph = FALSE)
fviz_cos2(data.pca, choice = "var", axes = 1:2)
pairsplot(data.pca)
eigencorplot(data.pca)
eigencorplot(data.pca,
metavars = rownames(transcriptIDs))
horn <- parallelPCA(data.t)
print(horn$n)
# Find the elbow point
elbow <- findElbowPoint(data.pca$variance)
print(elbow)
# Get the PCs with that can explain at least 50% of the variability
print(sum(data.pca$variance[1:horn$n]))
data.important <- data.pca$loadings[, 1:horn$n]
screeplot(data.pca,
components = getComponents(p, 1:20),
vline = c(horn$n, elbow)) +
geom_label(aes(x = horn$n + 1, y = 50,
label = 'Horn\'s', vjust = -1, size = 8)) +
geom_label(aes(x = elbow + 1, y = 50,
label = 'Elbow method', vjust = -1, size = 8)
)
screeplot(data.pca,
components = getComponents(data.pca, 1:20),
vline = c(horn$n, elbow)) +
geom_label(aes(x = horn$n + 1, y = 50,
label = 'Horn\'s', vjust = -1, size = 8)) +
geom_label(aes(x = elbow + 1, y = 50,
label = 'Elbow method', vjust = -1, size = 8)
)
# Get the PCs with that can explain at least 50% of the variability
print(paste('Number of PCs to consider:'))
print(paste('Horn:', horn$n, '%Varation:', sum(data.pca$variance[1:horn$n])))
print(paste('Elbow:', elbow, '%Variation:', sum(data.pca$variance[1:horn$n])))
print(paste('Horn:', horn$n, '%Varation:', sum(data.pca$variance[1:horn$n])))
print(paste('Elbow:', elbow, '%Variation:', sum(data.pca$variance[1:elbow])))
View(data.pca)
View(data.pca)
# Show the loadings
# plotloadings(data.pca, labSize = 3)
plotloadings(data.pca,
rangeRetain = 0.01,
labSize = 4.0,
title = 'Loadings plot',
subtitle = 'PC1, PC2, PC3, PC4, PC5',
caption = 'Top 1% variables',
shape = 24,
col = c('limegreen', 'black', 'red3'),
drawConnectors = TRUE)
library(PCAtools, lib.loc = package_loc)
# Show the loadings
# plotloadings(data.pca, labSize = 3)
plotloadings(data.pca,
rangeRetain = 0.01,
labSize = 4.0,
title = 'Loadings plot',
subtitle = 'PC1, PC2, PC3, PC4, PC5',
caption = 'Top 1% variables',
shape = 24,
col = c('limegreen', 'black', 'red3'),
drawConnectors = TRUE)
# Show the loadings
# plotloadings(data.pca, labSize = 3)
plotloadings(data.pca,
rangeRetain = 0.01,
labSize = 4.0,
title = 'Loadings plot',
subtitle = 'PC1, PC2, PC3, PC4, PC5',
caption = 'Top 1% variables',
shape = 24,
col = c('limegreen', 'black', 'red3'),
drawConnectors = TRUE)
plotloadings(data.pca,
components = getComponents(data.pca, c(4,33,11,1)),
rangeRetain = 0.1,
labSize = 4.0,
absolute = FALSE,
title = 'Loadings plot',
subtitle = 'Misc PCs',
caption = 'Top 10% variables',
shape = 23, shapeSizeRange = c(1, 16),
col = c('white', 'pink'),
drawConnectors = FALSE)
plotloadings(data.pca,
components = getComponents(data.pca, 1:elbow),
rangeRetain = 0.1,
labSize = 4.0,
absolute = FALSE,
title = 'Loadings plot',
subtitle = 'Misc PCs',
caption = 'Top 10% variables',
shape = 23, shapeSizeRange = c(1, 16),
col = c('white', 'pink'),
drawConnectors = FALSE)
# Show the loadings
# plotloadings(data.pca, labSize = 3)
plotloadings(data.pca,
rangeRetain = 0.01,
labSize = 4.0,
title = 'Loadings plot',
subtitle = 'PC1, PC2, PC3, PC4, PC5',
caption = 'Top 1% variables',
shape = 24,
col = c('limegreen', 'black', 'red3'),
drawConnectors = TRUE)
plotloadings(data.pca,
components = getComponents(data.pca, 1:elbow),
rangeRetain = 0.1,
labSize = 4.0,
absolute = FALSE,
title = 'Loadings plot',
subtitle = 'Misc PCs',
caption = 'Top 10% variables',
shape = 23, shapeSizeRange = c(1, 16),
col = c('white', 'pink'),
drawConnectors = FALSE)
chooseMarchenkoPastur(data.t, var.explained=data.pca$sdev^2, noise=4)
BiocManager::install(
c("tzdb", "vroom", "readr", "affy", "caret", "e1071", "genefilter", "ggplot2", "locfit", "nnet", "oligo",
"pd.huex.1.0.st.v2", "BiocGenerics", "withr", "corrr", "idm", "irlba", "PCAtools", "RMTstat",
"biomaRt", "pROC"),
force = TRUE, dependencies = TRUE, lib = package_loc
)
data.pca.vars <- getVars(data.pca)
data.pca.vars
getLoadings(data.pca)
