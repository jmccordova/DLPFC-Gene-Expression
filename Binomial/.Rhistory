newdata = testset[, colnames(testset) != "diagnosis"],
type = "raw"
)
)
confMatrix.model.nb <- confusionMatrix(pred.model.nb, testset$diagnosis)
var.model.nb <- varImp(model.nb, useModel = TRUE, nonpara = TRUE, scale = TRUE)
return(list(model = model.nb, pred = pred.model.nb, confMatrix = confMatrix.model.nb, var = var.model.nb, roc = roc.model.nb))
} else if (method == "KNN") {
# Part 4.2: K Nearest Neighbors
set.seed(100)
trControl.knn <- trainControl(method='repeatedcv', number = 3, allowParallel = TRUE)
trainset.preprocessed <- preProcess(trainset[, colnames(trainset) != "diagnosis"])
model.knn <- train(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
method = "knn",
trControl = trControl.knn,
tuneLength = 20
)
pred.model.knn <- predict(model.knn, newdata = testset)
roc.model.knn <- auc(actual = testset$diagnosis,
predicted = predict(model.knn,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "raw"
)
)
confMatrix.model.knn <- confusionMatrix(pred.model.knn, testset$diagnosis)
var.model.knn <- varImp(model.knn, useModel = TRUE, nonpara = TRUE, scale = TRUE)
return(list(model = model.knn, pred = pred.model.knn, confMatrix = confMatrix.model.knn, var = var.model.knn, roc = roc.model.knn))
} else if (method == "DT") {
# Part 4.3: Decision Tree
# Part 4.3.1: Using rpart
model.dt <- rpart(formula = diagnosis ~ .,
data = trainset,
method = "class",
control = rpart.control(minsplit=2, minbucket = 1, cp = 0.001)
)
var.model.dt<- varImp(model.dt, useModel = TRUE, nonpara = TRUE, scale = TRUE)
arrange(var.model.dt, desc(Overall))
rpart.plot(model.dt)
pdf(export.filename)
prp(model.dt, extra=104)
dev.off()
# Part 4.3.2: Using train
## 10-fold CV
## repeated ten times
trControl.dt <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 10)
model.dt <- train(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
method = "rpart2",
trControl = trControl.dt
)
pred.model.dt <- predict(model.dt, newdata = testset)
roc.model.dt <- auc(actual = testset$diagnosis,
predicted = predict(model.dt,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "raw"
)
)
confMatrix.model.dt <- confusionMatrix(pred.model.dt, testset$diagnosis)
return(list(model = model.dt, pred = pred.model.dt, confMatrix = confMatrix.model.dt, var = var.model.dt, roc = roc.model.dt))
} else if (method == "SVM") {
# Part 4.4: SVM
# For SVM and random forest, cut the dataset to 10% of the dataset to make processing quicker
#trainset.cut <- trainset[sample(x = 1:nrow(trainset), size = nrow(trainset) * .10, replace = TRUE), colnames(trainset)]
#trainset.cut <- upSample(x = trainset.cut[, colnames(trainset.cut) %ni% "ADDEPEV3"], yname = "ADDEPEV3", y = trainset.cut$ADDEPEV3)
model.svm <- rminer::fit(diagnosis ~ .,
data = trainset,
model = "ksvm",
kpar = "automatic",
task = "class",
search = list(search = mparheuristic("ksvm", n = 5))
)
pred.model.svm <- predict(model.svm, newdata = testset)
confMatrix.model.svm <- confusionMatrix(pred.model.svm, testset$diagnosis)
if (tune) {
print(paste(kernel," @ ", cost))
print(confMatrix.model.svm)
}
var.model.svm <- Importance(model.svm, data = trainset)
if (!tune) {
roc.model.svm <- auc(actual = testset$diagnosis,
predicted = predict(model.svm,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "raw"
)
)
}
if (!tune) {
return(list(model = model.svm, pred = pred.model.svm, confMatrix = confMatrix.model.svm, var = var.model.svm, roc = roc.model.svm))
}
} else if (method == "LOG") {
model.logit <- multinom(diagnosis ~ .,
data = trainset)
pred.model.logit <- predict(model.logit, newdata = testset[, colnames(testset) != "diagnosis"], type = "class")
roc.model.logit <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.logit,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
roc.model.logit <- auc(actual = testset$diagnosis,
predicted = predict(model.logit,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "probs"
)
)
confMatrix.model.logit <- confusionMatrix(pred.model.logit, testset$diagnosis)
var.model.logit <- varImp(model.logit, useModel = TRUE, nonpara = TRUE, scale = TRUE)
#summary(model.logit)
#View(cbind("coeff" = coef(model.logit), "odds ratio" = (exp(coef(model.logit)) - 1) * 100)) # Odds ratio
return(list(model = model.logit, pred = pred.model.logit, confMatrix = confMatrix.model.logit, var = var.model.logit, roc = roc.model.logit))
} else if (method == "DA") {
# Part 4.6: Discriminant Analysis
trControl.lda <- trainControl(classProbs = TRUE)
levels(trainset$diagnosis)[match("1",levels(trainset$diagnosis))] <- "DIS"
levels(trainset$diagnosis)[match("9",levels(trainset$diagnosis))] <- "CTL"
model.lda <- train(diagnosis ~ .,
data = trainset,
method = "lda",
trControl = trControl.lda)
levels(testset$diagnosis)[match("1",levels(testset$diagnosis))] <- "DIS"
levels(testset$diagnosis)[match("9",levels(testset$diagnosis))] <- "CTL"
var.model.lda <- varImp(model.lda, useModel = TRUE, nonpara = TRUE, scale = TRUE)
model.lda <- lda(diagnosis ~ .,
data = trainset,
)
pred.model.lda <- predict(model.lda, newdata = testset)
print(predict(model.lda,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "raw"
)$posterior[,2])
roc.model.lda <- auc(actual = testset$diagnosis,
predicted = predict(model.lda,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "raw"
)$posterior[,2]
)
confMatrix.model.lda <- confusionMatrix(pred.model.lda$class, testset$diagnosis)
#return(list(model = model.lda, pred = pred.model.lda, confMatrix = confMatrix.model.lda, var = var.model.lda))
return(list(model = model.lda, pred = pred.model.lda, confMatrix = confMatrix.model.lda, var = var.model.lda, roc = roc.model.lda))
} else if (method == "RF") {
# Part 4.7: Random Forest
set.seed(100)
# tuneRF
invisible(capture.output(fgl.res <- tuneRF(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
stepFactor=1.5)
)
)
# choose the best mtry based on the lowest OOB error
best_mtry <- fgl.res[fgl.res[, 2] == min(fgl.res[, 2]), 1]
# choose the lowest OOB error
best_oob  <- fgl.res[fgl.res[, 2] == min(fgl.res[, 2]), 2]
if (tune) {
ntrees <- seq.int(3001, 4001,  by = 100)
} else {
ntrees <- c(rf.ntree)
}
mtries <- c(best_mtry)
for(ntree in ntrees) {
for(mtry in mtries) {
model.rf <- randomForest(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
ntree = ntree,
mtry = mtry,
oob.error=best_oob
)
pred.model.rf <- predict(model.rf, newdata = testset)
if (!tune) {
roc.model.rf <- auc(actual = testset$diagnosis,
predicted = predict(model.rf,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "response"
)
)
}
confMatrix.model.rf <- confusionMatrix(pred.model.rf, testset$diagnosis)
if (tune) {
print(paste(ntree," and ", mtry))
print(confMatrix.model.rf)
}
var.model.rf <- varImp(model.rf, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.rf <- arrange(var.model.rf, desc(Overall))
}
}
if (!tune) {
return(list(model = model.rf, pred = pred.model.rf, confMatrix = confMatrix.model.rf, var = var.model.rf, roc = roc.model.rf))
}
} else {
model.auto <- rminer::fit(diagnosis ~ .,
data = trainset,
model = "auto",
fdebug = TRUE,
search = list(
search = mparheuristic(
model = c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","lssvm","mlp","mlpe", "randomForest","lda","multinom", "naiveBayes","xgboost"),
task = "class",
inputs = ncol(trainset)-1
),
smethod = "auto",
metric = "AUC",
convex = 0
)
)
pred.model.auto <- predict(model.auto, testset)
roc.model.auto <- round(mmetric(testset$diagnosis, pred.model.auto, metric="AUC"), 2)
var.model.auto <- Importance(model.auto, data = trainset, method = "DSA")
# show leaderboard:
cat("Models  by rank:", model.auto@mpar$LB$model, "\n")
cat("Validation values:", round(model.auto@mpar$LB$eval,4), "\n")
cat("Best model:", model.auto@model, "\n")
cat("AUC", "=", roc.model.auto, "\n")
return(list(model = model.auto, pred = pred.model.auto, confMatrix = c(), var = var.model.auto, roc = roc.model.auto))
}
}
# Part 4.3.3.2.4: SVM
learn.features.svm <- perform_learning("SVM", trainset.binomial, testset.binomial, svm.kernel = 'splinedot', svm.cost = 100)
learn.features.svm$confMatrix
learn.features.svm$roc
# Part 4.3.3.2.5: Logistic Regression
learn.features.log <- perform_learning("LOG", trainset.binomial, testset.binomial)
learn.features.log$roc
# Part 4.3.3.2.6: Discriminant Analysis
learn.features.da <- perform_learning("DA", trainset.binomial, testset.binomial)
# Part 4.3.3.2.7: Decision Tree
learn.features.dt <- perform_learning("DT", trainset.binomial, testset.binomial, export.filename = paste(exportdir, exportsubdir, "Decision Tree (GF + PCA).pdf", sep = "/"))
learn.features.dt$roc
# Part 4.3.3.2.8: Random Forest  (For PCA, SVM tuning had no significant features)
learn.features.rf <- perform_learning("RF", trainset.binomial, testset.binomial, rf.ntree = 201, rf.mtry = 10)
perform_learning("RF", trainset.binomial, testset.binomial, tune = TRUE)
# Part 4.3.3.2.8: Random Forest  (For PCA, SVM tuning had no significant features)
learn.features.rf <- perform_learning("RF", trainset.binomial, testset.binomial, rf.ntree = 320, rf.mtry = 13)
learn.features.rf$roc
learn.features.rf$confMatrix
# Part 4.3.3.2.8: Random Forest  (For PCA, SVM tuning had no significant features)
learn.features.rf <- perform_learning("RF", trainset.binomial, testset.binomial, rf.ntree = 3201, rf.mtry = 13)
learn.features.rf$confMatrix
learn.features.rf$roc
# Part 4.3.2: PCA Dataset
data.binomial <- createDataset(dataSource = data.pp, feature = features.pca, probeset = huex.probes, filename = "PCA")
sets <- buildTrainTest(data.binomial)
trainset.binomial <- sets$trainset
testset.binomial <- sets$testset
remove(sets)
# Part 4.3.2.1: Perform tuning for SVM and Random Forest
perform_learning("SVM", trainset.binomial, testset.binomial, tune = TRUE)
# Part 4.3.2.2.4: SVM (For PCA, SVM tuning had no significant features)
learn.pca.svm <- perform_learning("SVM", trainset.binomial, testset.binomial, svm.kernel = 'splinedot', svm.cost = 100)
learn.pca.svm$roc
learn.pca.svm$confMatrix
# Part 4.3: Perform ML
# Part 4.3.1: Gene Filtering Dataset
data.binomial <- createDataset(dataSource = data.pp, feature = features.gf, probeset = huex.probes, filename = "Gene Filtering")
sets <- buildTrainTest(data.binomial)
trainset.binomial <- sets$trainset
testset.binomial <- sets$testset
remove(sets)
# Part 4.3.1.1: Perform tuning for SVM and Random Forest
perform_learning("SVM", trainset.binomial, testset.binomial, tune = TRUE)
# Part 4.3.1.2.4: SVM
learn.gf.svm <- perform_learning("SVM", trainset.binomial, testset.binomial, svm.kernel = 'splinedot', svm.cost = 100)
learn.gf.svm$confMatrix
learn.gf.svm$roc
learn.gf.auto$var
learn.gf.auto$var$imp
learn.gf.auto$var$measure
# Part 5 - Ranking
exportsubdir <- "Step 5 - Ranking"
learn.gf.auto$var$importance
rownames(learn.features.knn$var$importance)[1:20]
rownames(learn.features.auto$var)[1:20]
learn.gf.auto$var$value
learn.gf.auto$var$sresponses
# Part 5 - Ranking
exportsubdir <- "Step 5 - Ranking"
dir.create(paste(exportdir, exportsubdir, sep = "/"), recursive=TRUE)
# Part 5.1. Build list
ranking <- list(
naive_bayes.gf = rownames(learn.gf.nb$var$importance)[1:20],
naive_bayes.pca = rownames(learn.pca.nb$var$importance)[1:20],
naive_bayes.features = rownames(learn.features.nb$var$importance)[1:20],
knn.gf = rownames(learn.gf.knn$var$importance)[1:20],
knn.pca = rownames(learn.pca.knn$var$importance)[1:20],
knn.features = rownames(learn.features.knn$var$importance)[1:20],
svm.gf = rownames(learn.gf.svm$var$importance)[1:20],
svm.pca = rownames(learn.pca.svm$var$importance)[1:20],
svm.features = rownames(learn.features.svm$var$importance)[1:20],
logistic_regression.gf = gsub("`", "", rownames(learn.gf.log$var), fixed = T)[1:20],
logistic_regression.pca = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
logistic_regression.features = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
discriminant_analysis.gf = rownames(learn.gf.da$var$importance)[1:20],
discriminant_analysis.pca = rownames(learn.pca.da$var$importance)[1:20],
discriminant_analysis.features = rownames(learn.features.da$var$importance)[1:20],
decision_tree.gf = rownames(learn.gf.dt$var)[1:20],
decision_tree.pca = rownames(learn.pca.dt$var)[1:20],
decision_tree.features = rownames(learn.features.dt$var)[1:20],
random_forest.gf = rownames(learn.gf.rf$var$importance)[1:20],
random_forest.pca = rownames(learn.pca.rf$var$importance)[1:20],
random_forest.features = rownames(learn.features.rf$var$importance)[1:20]
)
# Step 5.2: Export
write.csv(ranking, paste(exportdir, exportsubdir, "Ranking.csv", sep = "/"), row.names = TRUE)
rownames(learn.gf.rf$var$importance)
learn.gf.rf$var
rownames(learn.gf.rf$var)[1..20]
rownames(learn.gf.rf$var)[1:20]
# Part 5.1. Build list
ranking <- list(
naive_bayes.gf = rownames(learn.gf.nb$var$importance)[1:20],
naive_bayes.pca = rownames(learn.pca.nb$var$importance)[1:20],
naive_bayes.features = rownames(learn.features.nb$var$importance)[1:20],
knn.gf = rownames(learn.gf.knn$var$importance)[1:20],
knn.pca = rownames(learn.pca.knn$var$importance)[1:20],
knn.features = rownames(learn.features.knn$var$importance)[1:20],
svm.gf = rownames(learn.gf.svm$var$importance)[1:20],
svm.pca = rownames(learn.pca.svm$var$importance)[1:20],
svm.features = rownames(learn.features.svm$var$importance)[1:20],
logistic_regression.gf = gsub("`", "", rownames(learn.gf.log$var), fixed = T)[1:20],
logistic_regression.pca = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
logistic_regression.features = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
discriminant_analysis.gf = rownames(learn.gf.da$var$importance)[1:20],
discriminant_analysis.pca = rownames(learn.pca.da$var$importance)[1:20],
discriminant_analysis.features = rownames(learn.features.da$var$importance)[1:20],
decision_tree.gf = rownames(learn.gf.dt$var)[1:20],
decision_tree.pca = rownames(learn.pca.dt$var)[1:20],
decision_tree.features = rownames(learn.features.dt$var)[1:20],
random_forest.gf = rownames(learn.gf.rf$var)[1:20],
random_forest.pca = rownames(learn.pca.rf$var)[1:20],
random_forest.features = rownames(learn.features.rf$var)[1:20]
)
# Step 5.2: Export
write.csv(ranking, paste(exportdir, exportsubdir, "Ranking.csv", sep = "/"), row.names = TRUE)
# Part 5.1. Build list
ranking <- list(
naive_bayes.gf = rownames(learn.gf.nb$var$importance)[1:20],
naive_bayes.pca = rownames(learn.pca.nb$var$importance)[1:20],
naive_bayes.features = rownames(learn.features.nb$var$importance)[1:20],
knn.gf = rownames(learn.gf.knn$var$importance)[1:20],
knn.pca = rownames(learn.pca.knn$var$importance)[1:20],
knn.features = rownames(learn.features.knn$var$importance)[1:20],
svm.gf = rownames(learn.gf.svm$var)[1:20],
svm.pca = rownames(learn.pca.svm$var)[1:20],
svm.features = rownames(learn.features.svm$var)[1:20],
logistic_regression.gf = gsub("`", "", rownames(learn.gf.log$var), fixed = T)[1:20],
logistic_regression.pca = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
logistic_regression.features = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
discriminant_analysis.gf = rownames(learn.gf.da$var$importance)[1:20],
discriminant_analysis.pca = rownames(learn.pca.da$var$importance)[1:20],
discriminant_analysis.features = rownames(learn.features.da$var$importance)[1:20],
decision_tree.gf = rownames(learn.gf.dt$var)[1:20],
decision_tree.pca = rownames(learn.pca.dt$var)[1:20],
decision_tree.features = rownames(learn.features.dt$var)[1:20],
random_forest.gf = rownames(learn.gf.rf$var)[1:20],
random_forest.pca = rownames(learn.pca.rf$var)[1:20],
random_forest.features = rownames(learn.features.rf$var)[1:20]
)
# Step 5.2: Export
write.csv(ranking, paste(exportdir, exportsubdir, "Ranking.csv", sep = "/"), row.names = TRUE)
rownames(learn.features.rf$var)[1:20]
rownames(learn.pca.rf$var)[1:20]
rownames(learn.gf.svm$var)[1:20]
learn.gf.svm$var)
learn.gf.svm$var
learn.gf.svm$var$imp
learn.gf.svm$var$inputs
learn.gf.svm$var$measure
learn.gf.svm$var$interactions
learn.gf.svm$var$imp
learn.gf.svm$var$value
learn.gf.svm$var$sresponses
learn.gf.svm$var$sresponses[[30]]
learn.gf.svm$var$sresponses[[31]]
learn.gf.svm$var$sresponses[[1]]
learn.gf.svm$var$sresponses[[2]]
rep(NA, 20)
help(rep)
# Part 5.1. Build list
ranking <- list(
naive_bayes.gf = rownames(learn.gf.nb$var$importance)[1:20],
naive_bayes.pca = rownames(learn.pca.nb$var$importance)[1:20],
naive_bayes.features = rownames(learn.features.nb$var$importance)[1:20],
knn.gf = rownames(learn.gf.knn$var$importance)[1:20],
knn.pca = rownames(learn.pca.knn$var$importance)[1:20],
knn.features = rownames(learn.features.knn$var$importance)[1:20],
svm.gf = rep(NA, 20), #rownames(learn.gf.svm$var)[1:20],
svm.pca = rep(NA, 20), #rownames(learn.pca.svm$var)[1:20],
svm.features = rep(NA, 20), #rownames(learn.features.svm$var)[1:20],
logistic_regression.gf = gsub("`", "", rownames(learn.gf.log$var), fixed = T)[1:20],
logistic_regression.pca = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
logistic_regression.features = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
discriminant_analysis.gf = rownames(learn.gf.da$var$importance)[1:20],
discriminant_analysis.pca = rownames(learn.pca.da$var$importance)[1:20],
discriminant_analysis.features = rownames(learn.features.da$var$importance)[1:20],
decision_tree.gf = rownames(learn.gf.dt$var)[1:20],
decision_tree.pca = rownames(learn.pca.dt$var)[1:20],
decision_tree.features = rownames(learn.features.dt$var)[1:20],
random_forest.gf = rownames(learn.gf.rf$var)[1:20],
random_forest.pca = rownames(learn.pca.rf$var)[1:20],
random_forest.features = rownames(learn.features.rf$var)[1:20]
)
# Step 5.2: Export
write.csv(ranking, paste(exportdir, exportsubdir, "Ranking.csv", sep = "/"), row.names = TRUE)
# Step 5.3: Get data from annotation
write.csv(huex.probes[, which(huex.probes$probeset_id %in% features)], paste(exportdir, exportsubdir, "Annotated Features.csv", sep = "/"), row.names = TRUE)
save.image("E:/jmcco/OneDrive - University of the Philippines/School/AY 2022-2023/2nd Sem/HI 299 Research Methods in Health Informatics/HI 299 Project/DLPFC-Gene-Expression/Binomial/.RData")
# Part 1: Setting up
exportsubdir <- "Part 1 - Setup"
# Part 1.1: Sets the location of the data to be used and where the packages should be put
datadir <- "E:/jmcco/Downloads/BNF 300.2 Data/GSE208338_RAW/"
#probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/Affymetrix_HuEx/"
probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/HuEx-1_0-st-v2-na36-hg19 Probeset/"
setwd(datadir)
exportdir <- paste(dirname(rstudioapi::getSourceEditorContext()$path), "/Export", sep = "")
package_loc <- paste(datadir, "lib", sep = "")
library(BiocManager, lib.loc = package_loc)
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(withr, lib = package_loc); library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(withr, lib = package_loc); library(ggplot2, lib = package_loc);
library(genefilter, lib = package_loc); library(memoise, lib = package_loc); library(limma, lib = package_loc); library(labeling, lib = package_loc); library(farver, lib = package_loc); library(ggvenn, lib = package_loc)
library(multtest, lib = package_loc);  library(pkgconfig, lib = package_loc);  library(GO.db, lib = package_loc); library(annaffy, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(rappdirs, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
library(corrplot, lib.loc = package_loc); library(factoextra, lib.loc = package_loc); library(car, lib.loc = package_loc)
library(jsonlite, lib.loc = package_loc); library(backports, lib.loc = package_loc); library(Hmisc, lib.loc = package_loc);
# Part 4: Analysis
library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc); library(rminer, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
library(MASS, lib.loc = package_loc); library(Metrics, lib.loc = package_loc);
library(caret, lib.loc = package_loc);
varImp(learn.gf.svm, scale = FALSE)
varImp(learn.gf.svm$model, scale = FALSE)
help(varImp)
help(Importance)
learn.gf.svm$var$value
learn.gf.svm$var$sresponses
# Part 4.3: Perform ML
# Part 4.3.1: Gene Filtering Dataset
data.binomial <- createDataset(dataSource = data.pp, feature = features.gf, probeset = huex.probes, filename = "Gene Filtering")
sets <- buildTrainTest(data.binomial)
# Part 4: Machine Learning
exportsubdir <- "Step 4 - Analysis"
dir.create(paste(exportdir, exportsubdir, sep = "/"), recursive=TRUE)
# Part 4.3.1.2.4: SVM
learn.gf.svm <- perform_learning("SVM", trainset.binomial, testset.binomial, svm.kernel = 'splinedot', svm.cost = 100)
learn.gf.svm$var <- data.frame('feature' = features.gf, "Overall" = learn.gf.svm$var$imp[-1])
learn.gf.svm$var <- learn.gf.svm$var[order(-learn.gf.svm$var$Overall), ]
# Part 4.3.2: PCA Dataset
data.binomial <- createDataset(dataSource = data.pp, feature = features.pca, probeset = huex.probes, filename = "PCA")
sets <- buildTrainTest(data.binomial)
trainset.binomial <- sets$trainset
testset.binomial <- sets$testset
remove(sets)
# Part 4.3.2.2.4: SVM (For PCA, SVM tuning had no significant features)
learn.pca.svm <- perform_learning("SVM", trainset.binomial, testset.binomial, svm.kernel = 'splinedot', svm.cost = 100)
learn.pca.svm$var <- data.frame('feature' = features.pca, "Overall" = learn.pca.svm$var$imp[-1])
learn.pca.svm$var <- learn.pca.svm$var[order(-learn.pca.svm$var$Overall), ]
# Part 4.3.3: Combined Dataset
data.binomial <- createDataset(dataSource = data.pp, feature = features, probeset = huex.probes, filename = "PCA + GF")
sets <- buildTrainTest(data.binomial)
trainset.binomial <- sets$trainset
testset.binomial <- sets$testset
remove(sets)
# Part 4.3.3.2.4: SVM
learn.features.svm <- perform_learning("SVM", trainset.binomial, testset.binomial, svm.kernel = 'splinedot', svm.cost = 100)
learn.features.svm$var <- data.frame('feature' = features, "Overall" = learn.features.svm$var$imp[-1])
learn.features.svm$var <- learn.features.svm$var[order(-learn.features.svm$var$Overall), ]
# Part 5 - Ranking
exportsubdir <- "Step 5 - Ranking"
dir.create(paste(exportdir, exportsubdir, sep = "/"), recursive=TRUE)
# Part 5.1. Build list
ranking <- list(
naive_bayes.gf = rownames(learn.gf.nb$var$importance)[1:20],
naive_bayes.pca = rownames(learn.pca.nb$var$importance)[1:20],
naive_bayes.features = rownames(learn.features.nb$var$importance)[1:20],
knn.gf = rownames(learn.gf.knn$var$importance)[1:20],
knn.pca = rownames(learn.pca.knn$var$importance)[1:20],
knn.features = rownames(learn.features.knn$var$importance)[1:20],
svm.gf = learn.gf.svm$var$feature[1:20],
svm.pca =learn.pca.svm$var$feature[1:20],
svm.features = learn.features.svm$var$feature[1:20],
logistic_regression.gf = gsub("`", "", rownames(learn.gf.log$var), fixed = T)[1:20],
logistic_regression.pca = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
logistic_regression.features = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
discriminant_analysis.gf = rownames(learn.gf.da$var$importance)[1:20],
discriminant_analysis.pca = rownames(learn.pca.da$var$importance)[1:20],
discriminant_analysis.features = rownames(learn.features.da$var$importance)[1:20],
decision_tree.gf = rownames(learn.gf.dt$var)[1:20],
decision_tree.pca = rownames(learn.pca.dt$var)[1:20],
decision_tree.features = rownames(learn.features.dt$var)[1:20],
random_forest.gf = rownames(learn.gf.rf$var)[1:20],
random_forest.pca = rownames(learn.pca.rf$var)[1:20],
random_forest.features = rownames(learn.features.rf$var)[1:20]
)
# Step 5.2: Export
write.csv(ranking, paste(exportdir, exportsubdir, "Ranking.csv", sep = "/"), row.names = TRUE)
# Step 5.3: Get data from annotation
write.csv(huex.probes[, which(huex.probes$probeset_id %in% features)], paste(exportdir, exportsubdir, "Annotated Features.csv", sep = "/"), row.names = TRUE)
save.image("E:/jmcco/OneDrive - University of the Philippines/School/AY 2022-2023/2nd Sem/HI 299 Research Methods in Health Informatics/HI 299 Project/DLPFC-Gene-Expression/Binomial/.RData")
