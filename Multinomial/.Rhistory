data = trainset)
pred.model.logit <- predict(model.logit, newdata = testset[, colnames(testset) != "diagnosis"], type = "class")
roc.model.logit <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.logit,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.logit <- confusionMatrix(pred.model.logit, testset$diagnosis)
#var.model.logit <- varImp(model.logit, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.logit <- varImp(model.logit, scale = FALSE)
var.model.logit <- data.frame("feature" = rownames(var.model.logit), "Overall" = var.model.logit$Overall)
var.model.logit <- var.model.logit[order(-var.model.logit$Overall), ]
#summary(model.logit)
#View(cbind("coeff" = coef(model.logit), "odds ratio" = (exp(coef(model.logit)) - 1) * 100)) # Odds ratio
return(list(model = model.logit, pred = pred.model.logit, confMatrix = confMatrix.model.logit, var = var.model.logit, roc = roc.model.logit))
} else if (method == "DA") {
# Part 4.6: Discriminant Analysis
trControl.lda <- trainControl(classProbs = TRUE)
levels(trainset$diagnosis)[match("1",levels(trainset$diagnosis))] <- "BPD"
levels(trainset$diagnosis)[match("2",levels(trainset$diagnosis))] <- "MDD"
levels(trainset$diagnosis)[match("3",levels(trainset$diagnosis))] <- "SCZ"
levels(trainset$diagnosis)[match("9",levels(trainset$diagnosis))] <- "CTL"
model.lda <- train(diagnosis ~ .,
data = trainset,
method = "lda",
trControl = trControl.lda)
levels(testset$diagnosis)[match("1",levels(testset$diagnosis))] <- "BPD"
levels(testset$diagnosis)[match("2",levels(testset$diagnosis))] <- "MDD"
levels(testset$diagnosis)[match("3",levels(testset$diagnosis))] <- "SCZ"
levels(testset$diagnosis)[match("9",levels(testset$diagnosis))] <- "CTL"
#var.model.lda <- varImp(model.lda, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.lda <- varImp(model.lda, scale = FALSE)
model.lda <- lda(diagnosis ~ .,
data = trainset,
)
pred.model.lda <- predict(model.lda, newdata = testset)
roc.model.lda <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.lda,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob")$posterior,
percent = TRUE)
confMatrix.model.lda <- confusionMatrix(pred.model.lda$class, testset$diagnosis)
#return(list(model = model.lda, pred = pred.model.lda, confMatrix = confMatrix.model.lda, var = var.model.lda))
return(list(model = model.lda, pred = pred.model.lda, confMatrix = confMatrix.model.lda, var = var.model.lda, roc = roc.model.lda))
} else if (method == "RF") {
# Part 4.7: Random Forest
set.seed(100)
if (tune) {
mtries <- sort.int(sample(ncol(trainset)-1, 5))
ntrees <- c(201, 501, 1501, 2501, 3501)
} else {
mtries <- c(rf.mtry)
ntrees <- c(rf.ntree)
}
for(ntree in ntrees) {
for(mtry in mtries) {
model.rf <- randomForest(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
ntree = ntree,
mtry = mtry
)
pred.model.rf <- predict(model.rf, newdata = testset)
#if (!tune) {
roc.model.rf <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.rf,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
#}
confMatrix.model.rf <- confusionMatrix(pred.model.rf, testset$diagnosis)
#if (tune && confMatrix.model.rf$overall['AccuracyPValue'] < 0.05) {
if (tune) {
print(paste(ntree," and ", mtry))
print(confMatrix.model.rf$overall['Accuracy'])
print(confMatrix.model.rf$overall['AccuracyPValue'])
print(roc.model.rf$auc)
}
#var.model.rf <- varImp(model.rf, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.rf <- varImp(model.rf, scale = FALSE)
var.model.rf <- arrange(var.model.rf, desc(Overall))
}
}
if (!tune) {
return(list(model = model.rf, pred = pred.model.rf, confMatrix = confMatrix.model.rf, var = var.model.rf, roc = roc.model.rf))
}
} else {
model.auto <- rminer::fit(diagnosis ~ .,
data = trainset,
model = "auto",
fdebug = TRUE,
search = list(
search = mparheuristic(
model = c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","lssvm","mlp","mlpe", "randomForest","lda","multinom", "naiveBayes","xgboost"),
task = "class",
inputs = ncol(trainset)-1
),
smethod = "auto",
metric = "AUC",
convex = 0
)
)
pred.model.auto <- predict(model.auto, testset)
roc.model.auto <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.auto,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
var.model.auto <- Importance(model.auto, data = trainset, method = "DSA", outindex = "diagnosis")
var.model.auto <- data.frame("feature" = colnames(var.model.auto$data), "Overall" = var.model.auto$imp)
var.model.auto <- head(var.model.auto, -1)
var.model.auto <- var.model.auto[order(-var.model.auto$Overall),]
# show leaderboard:
cat("Models  by rank:", model.auto@mpar$LB$model, "\n")
cat("Validation values:", round(model.auto@mpar$LB$eval,4), "\n")
cat("Best model:", model.auto@model, "\n")
cat("AUC", "=", round(mmetric(testset$diagnosis, pred.model.auto, metric="AUC"),2), "\n")
return(list(model = model.auto, pred = pred.model.auto, confMatrix = rminer::mmetric(testset$diagnosis, pred.model.auto, "ALL"), var = var.model.auto, roc = roc.model.auto))
}
}
# Part 4.3.3: Combined Dataset
data.multinomial <- createDataset(dataSource = data.pp, feature = features, probeset = huex.probes, filename = "PCA + GF")
sets <- buildTrainTest(data.multinomial)
trainset.multinomial <- sets$trainset
testset.multinomial <- sets$testset
remove(sets)
# Part 4.3.3.2: Perform analysis
# Part 4.3.3.2.1: Do ensemble of all learning methods
learn.features.auto <- perform_learning("auto", trainset.multinomial, testset.multinomial)
learn.features.auto$confMatrix
learn.features.nb$confMatrix
learn.features.nb$confMatrix$byClass['Pos Pred Value']
learn.features.nb$confMatrix$byClass
learn.features.knn$confMatrix
learn.features.nb$confMatrix
learn.features.knn$confMatrix
learn.features.knn$confMatrix$byClass
learn.features.svm$confMatrix$byClass
learn.features.svm$confMatrix
learn.features.svm$confMatrix$byClass
learn.features.log$confMatrix
learn.features.log$confMatrix$byClass
learn.features.lda$confMatrix
learn.features.da$confMatrix
learn.features.da$confMatrix$byClass
learn.features.rf$confMatrix
learn.features.rf$confMatrix$byClass
# Part 1: Setting up
exportsubdir <- "Part 1 - Setup"
# Part 1.1: Sets the location of the data to be used and where the packages should be put
datadir <- "E:/jmcco/Downloads/BNF 300.2 Data/GSE208338_RAW/"
#probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/Affymetrix_HuEx/"
probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/HuEx-1_0-st-v2-na36-hg19 Probeset/"
setwd(datadir)
exportdir <- paste(dirname(rstudioapi::getSourceEditorContext()$path), "/Export", sep = "")
package_loc <- paste(datadir, "lib", sep = "")
library(BiocManager, lib.loc = package_loc)
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(withr, lib = package_loc); library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(withr, lib = package_loc); library(ggplot2, lib = package_loc);
library(genefilter, lib = package_loc); library(memoise, lib = package_loc); library(limma, lib = package_loc); library(labeling, lib = package_loc); library(farver, lib = package_loc); library(ggvenn, lib = package_loc)
library(multtest, lib = package_loc);  library(pkgconfig, lib = package_loc);  library(GO.db, lib = package_loc); library(annaffy, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(rappdirs, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
library(corrplot, lib.loc = package_loc); library(factoextra, lib.loc = package_loc); library(car, lib.loc = package_loc)
library(jsonlite, lib.loc = package_loc); library(backports, lib.loc = package_loc); library(Hmisc, lib.loc = package_loc);
# Part 4: Analysis
library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc); library(rminer, lib.loc = package_loc); library(VGAM, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
library(MASS, lib.loc = package_loc); library(Metrics, lib.loc = package_loc);
library(caret, lib.loc = package_loc);
fit <- vglm(diagnosis ~ ., family = multinomial(refLevel="CTL"), data = trainset.multinomial) # vglm = vector GLM
coef(fit, matrix = TRUE)
learn.features.log$model
fitted(fit)
fit
exp(coef(fit))
exp(coef(learn.features.log$model))
exp(coef(fit))
exp(coef(fit, matrix = TRUE))
coef(fit, matrix = TRUE)
# Part 4: Machine Learning
exportsubdir <- "Step 4 - Analysis"
dir.create(paste(exportdir, exportsubdir, sep = "/"), recursive=TRUE)
write.csv(exp(coef(fit, matrix = TRUE)), paste(exportdir, exportsubdir, "Logistic Regression - Log Likelihood.csv", sep = "/"), row.names = TRUE)
write.csv(coef(fit, matrix = TRUE), paste(exportdir, exportsubdir, "Logistic Regression - Coefficients.csv", sep = "/"), row.names = TRUE)
save.image("E:/jmcco/OneDrive - University of the Philippines/School/AY 2022-2023/2nd Sem/HI 299 Research Methods in Health Informatics/HI 299 Project/DLPFC-Gene-Expression/Multinomial/.RData")
# Part 1: Setting up
exportsubdir <- "Part 1 - Setup"
# Part 1.1: Sets the location of the data to be used and where the packages should be put
datadir <- "E:/jmcco/Downloads/BNF 300.2 Data/GSE208338_RAW/"
#probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/Affymetrix_HuEx/"
probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/HuEx-1_0-st-v2-na36-hg19 Probeset/"
setwd(datadir)
exportdir <- paste(dirname(rstudioapi::getSourceEditorContext()$path), "/Export", sep = "")
package_loc <- paste(datadir, "lib", sep = "")
library(BiocManager, lib.loc = package_loc)
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(withr, lib = package_loc); library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(withr, lib = package_loc); library(ggplot2, lib = package_loc);
library(genefilter, lib = package_loc); library(memoise, lib = package_loc); library(limma, lib = package_loc); library(labeling, lib = package_loc); library(farver, lib = package_loc); library(ggvenn, lib = package_loc)
library(multtest, lib = package_loc);  library(pkgconfig, lib = package_loc);  library(GO.db, lib = package_loc); library(annaffy, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(rappdirs, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
library(corrplot, lib.loc = package_loc); library(factoextra, lib.loc = package_loc); library(car, lib.loc = package_loc)
library(jsonlite, lib.loc = package_loc); library(backports, lib.loc = package_loc); library(Hmisc, lib.loc = package_loc);
# Part 4: Analysis
library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc); library(rminer, lib.loc = package_loc); library(VGAM, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
library(MASS, lib.loc = package_loc); library(Metrics, lib.loc = package_loc);
library(caret, lib.loc = package_loc);
# Part 4: Machine Learning
exportsubdir <- "Step 4 - Analysis"
dir.create(paste(exportdir, exportsubdir, sep = "/"), recursive=TRUE)
# Part 4.2: Create a function for each ML
perform_learning <- function(method, trainset, testset,
svm.kernel = NULL,
svm.cost = NULL,
rf.ntree = NULL,
rf.mtry = NULL,
export.filename = NULL,
tune = FALSE) {
if (method == "NB") {
# Part 4.1: Naive Bayes
set.seed(100)
model.nb <- train(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
method = "naive_bayes",
trControl = trainControl(method='cv', number=10)
)
pred.model.nb <- predict(model.nb, newdata = testset[, colnames(trainset) != "diagnosis"])
roc.model.nb <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.nb,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.nb <- confusionMatrix(pred.model.nb, testset$diagnosis)
#var.model.nb <- varImp(model.nb, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.nb <- varImp(model.nb, scale = FALSE)
return(list(model = model.nb, pred = pred.model.nb, confMatrix = confMatrix.model.nb, var = var.model.nb, roc = roc.model.nb))
} else if (method == "KNN") {
# Part 4.2: K Nearest Neighbors
set.seed(100)
trControl.knn <- trainControl(method='repeatedcv', number = 3, allowParallel = TRUE)
trainset.preprocessed <- preProcess(trainset[, colnames(trainset) != "diagnosis"])
model.knn <- train(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
method = "knn",
trControl = trControl.knn,
tuneLength = 20
)
pred.model.knn <- predict(model.knn, newdata = testset)
roc.model.knn <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.knn,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.knn <- confusionMatrix(pred.model.knn, testset$diagnosis)
#var.model.knn <- varImp(model.knn, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.knn <- varImp(model.knn, scale = FALSE)
return(list(model = model.knn, pred = pred.model.knn, confMatrix = confMatrix.model.knn, var = var.model.knn, roc = roc.model.knn))
} else if (method == "DT") {
# Part 4.3: Decision Tree
# Part 4.3.1: Using rpart
model.dt <- rpart(formula = diagnosis ~ .,
data = trainset,
method = "class",
control = rpart.control(minsplit=2, minbucket = 1, cp = 0.001)
)
#var.model.dt<- varImp(model.dt, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.dt <- varImp(model.dt, scale = FALSE)
var.model.dt <- data.frame("feature" = rownames(var.model.dt), "Overall" = var.model.dt$Overall)
var.model.dt <- var.model.dt[var.model.dt$Overall > 0, ]
var.model.dt <- var.model.dt[order(-var.model.dt$Overall), ]
arrange(var.model.dt, desc(Overall))
rpart.plot(model.dt)
pdf(export.filename)
prp(model.dt, extra=104)
dev.off()
# Part 4.3.2: Using train
## 10-fold CV
## repeated ten times
trControl.dt <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 10)
model.dt <- train(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
method = "rpart2",
trControl = trControl.dt
)
pred.model.dt <- predict(model.dt, newdata = testset)
roc.model.dt <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.dt,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.dt <- confusionMatrix(pred.model.dt, testset$diagnosis)
return(list(model = model.dt, pred = pred.model.dt, confMatrix = confMatrix.model.dt, var = var.model.dt, roc = roc.model.dt))
} else if (method == "SVM") {
# Part 4.4: SVM
# For SVM and random forest, cut the dataset to 10% of the dataset to make processing quicker
#trainset.cut <- trainset[sample(x = 1:nrow(trainset), size = nrow(trainset) * .10, replace = TRUE), colnames(trainset)]
#trainset.cut <- upSample(x = trainset.cut[, colnames(trainset.cut) %ni% "ADDEPEV3"], yname = "ADDEPEV3", y = trainset.cut$ADDEPEV3)
if (tune) {
kernels <- c("rbfdot", "polydot", "tanhdot", "vanilladot", "laplacedot", "besseldot", "anovadot", "splinedot")
costs <- c(0.001, 0.01, 0.1, 1, 5, 10, 100)
} else {
kernels <- c(svm.kernel)
costs <- c(svm.cost)
}
for (kernel in kernels) {
for (cost in costs) {
model.svm <- rminer::fit(diagnosis ~ .,
data = trainset,
model = "svm",
kernel = kernel,
kpar = "automatic",
C = cost,
task = "class"
)
pred.model.svm <- predict(model.svm, newdata = testset)
confMatrix.model.svm <- confusionMatrix(pred.model.svm, testset$diagnosis)
var.model.svm <- Importance(model.svm, data = trainset, method = "DSA", outindex = "diagnosis")
var.model.svm <- data.frame("feature" = colnames(var.model.svm$data), "Overall" = var.model.svm$imp)
var.model.svm <- head(var.model.svm, -1)
var.model.svm <- var.model.svm[order(-var.model.svm$Overall),]
#if (!tune) {
roc.model.svm <- multiclass.roc(response = testset$diagnosis,
predictor = predict(rminer::fit(diagnosis ~ .,
data = trainset,
model = "svm",
kernel = kernel,
kpar = "automatic",
C = cost
),
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
#}
#if (tune && confMatrix.model.svm$overall['AccuracyPValue'] < 0.05) {
if (tune) {
print(paste(kernel," @ ", cost))
print(confMatrix.model.svm$overall['Accuracy'])
print(confMatrix.model.svm$overall['AccuracyPValue'])
print(roc.model.svm$auc)
}
}
}
if (!tune) {
return(list(model = model.svm, pred = pred.model.svm, confMatrix = confMatrix.model.svm, var = var.model.svm, roc = roc.model.svm))
}
} else if (method == "LOG") {
model.logit <- multinom(diagnosis ~ .,
data = trainset)
pred.model.logit <- predict(model.logit, newdata = testset[, colnames(testset) != "diagnosis"], type = "class")
roc.model.logit <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.logit,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.logit <- confusionMatrix(pred.model.logit, testset$diagnosis)
#var.model.logit <- varImp(model.logit, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.logit <- varImp(model.logit, scale = FALSE)
var.model.logit <- data.frame("feature" = rownames(var.model.logit), "Overall" = var.model.logit$Overall)
var.model.logit <- var.model.logit[order(-var.model.logit$Overall), ]
#summary(model.logit)
#View(cbind("coeff" = coef(model.logit), "odds ratio" = (exp(coef(model.logit)) - 1) * 100)) # Odds ratio
return(list(model = model.logit, pred = pred.model.logit, confMatrix = confMatrix.model.logit, var = var.model.logit, roc = roc.model.logit))
} else if (method == "DA") {
# Part 4.6: Discriminant Analysis
trControl.lda <- trainControl(classProbs = TRUE)
levels(trainset$diagnosis)[match("1",levels(trainset$diagnosis))] <- "BPD"
levels(trainset$diagnosis)[match("2",levels(trainset$diagnosis))] <- "MDD"
levels(trainset$diagnosis)[match("3",levels(trainset$diagnosis))] <- "SCZ"
levels(trainset$diagnosis)[match("9",levels(trainset$diagnosis))] <- "CTL"
model.lda <- train(diagnosis ~ .,
data = trainset,
method = "mda",
trControl = trControl.lda)
levels(testset$diagnosis)[match("1",levels(testset$diagnosis))] <- "BPD"
levels(testset$diagnosis)[match("2",levels(testset$diagnosis))] <- "MDD"
levels(testset$diagnosis)[match("3",levels(testset$diagnosis))] <- "SCZ"
levels(testset$diagnosis)[match("9",levels(testset$diagnosis))] <- "CTL"
#var.model.lda <- varImp(model.lda, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.lda <- varImp(model.lda, scale = FALSE)
model.lda <- lda(diagnosis ~ .,
data = trainset,
)
pred.model.lda <- predict(model.lda, newdata = testset)
roc.model.lda <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.lda,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob")$posterior,
percent = TRUE)
confMatrix.model.lda <- confusionMatrix(pred.model.lda$class, testset$diagnosis)
#return(list(model = model.lda, pred = pred.model.lda, confMatrix = confMatrix.model.lda, var = var.model.lda))
return(list(model = model.lda, pred = pred.model.lda, confMatrix = confMatrix.model.lda, var = var.model.lda, roc = roc.model.lda))
} else if (method == "RF") {
# Part 4.7: Random Forest
set.seed(100)
if (tune) {
mtries <- sort.int(sample(ncol(trainset)-1, 5))
ntrees <- c(201, 501, 1501, 2501, 3501)
} else {
mtries <- c(rf.mtry)
ntrees <- c(rf.ntree)
}
for(ntree in ntrees) {
for(mtry in mtries) {
model.rf <- randomForest(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
ntree = ntree,
mtry = mtry
)
pred.model.rf <- predict(model.rf, newdata = testset)
#if (!tune) {
roc.model.rf <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.rf,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
#}
confMatrix.model.rf <- confusionMatrix(pred.model.rf, testset$diagnosis)
#if (tune && confMatrix.model.rf$overall['AccuracyPValue'] < 0.05) {
if (tune) {
print(paste(ntree," and ", mtry))
print(confMatrix.model.rf$overall['Accuracy'])
print(confMatrix.model.rf$overall['AccuracyPValue'])
print(roc.model.rf$auc)
}
#var.model.rf <- varImp(model.rf, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.rf <- varImp(model.rf, scale = FALSE)
var.model.rf <- arrange(var.model.rf, desc(Overall))
}
}
if (!tune) {
return(list(model = model.rf, pred = pred.model.rf, confMatrix = confMatrix.model.rf, var = var.model.rf, roc = roc.model.rf))
}
} else {
model.auto <- rminer::fit(diagnosis ~ .,
data = trainset,
model = "auto",
fdebug = TRUE,
search = list(
search = mparheuristic(
model = c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","lssvm","mlp","mlpe", "randomForest","lda","multinom", "naiveBayes","xgboost"),
task = "class",
inputs = ncol(trainset)-1
),
smethod = "auto",
metric = "AUC",
convex = 0
)
)
pred.model.auto <- predict(model.auto, testset)
roc.model.auto <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.auto,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
var.model.auto <- Importance(model.auto, data = trainset, method = "DSA", outindex = "diagnosis")
var.model.auto <- data.frame("feature" = colnames(var.model.auto$data), "Overall" = var.model.auto$imp)
var.model.auto <- head(var.model.auto, -1)
var.model.auto <- var.model.auto[order(-var.model.auto$Overall),]
# show leaderboard:
cat("Models  by rank:", model.auto@mpar$LB$model, "\n")
cat("Validation values:", round(model.auto@mpar$LB$eval,4), "\n")
cat("Best model:", model.auto@model, "\n")
cat("AUC", "=", round(mmetric(testset$diagnosis, pred.model.auto, metric="AUC"),2), "\n")
return(list(model = model.auto, pred = pred.model.auto, confMatrix = rminer::mmetric(testset$diagnosis, pred.model.auto, "ALL"), var = var.model.auto, roc = roc.model.auto))
}
}
# Part 4.3.3: Combined Dataset
data.multinomial <- createDataset(dataSource = data.pp, feature = features, probeset = huex.probes, filename = "PCA + GF")
sets <- buildTrainTest(data.multinomial)
trainset.multinomial <- sets$trainset
testset.multinomial <- sets$testset
remove(sets)
# Part 4.3.3.2.6: Discriminant Analysis
learn.features.da <- perform_learning("DA", trainset.multinomial, testset.multinomial)
learn.features.da$model
learn.features.da$roc
learn.features.da$confMatrix
learn.features.da$model
coef(learn.features.da$model)
dim(coef(learn.features.da$model))
write.csv(coef(learn.features.da$model), paste(exportdir, exportsubdir, "DA (GF + PCA).csv", sep = "/"), row.names = TRUE)
save.image("E:/jmcco/OneDrive - University of the Philippines/School/AY 2022-2023/2nd Sem/HI 299 Research Methods in Health Informatics/HI 299 Project/DLPFC-Gene-Expression/Multinomial/.RData")
