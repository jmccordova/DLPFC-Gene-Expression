data.multinomial$'2385696'
which(features %in% huex.probes$probeset_id)
which(huex.probes$probeset_id %in% features)
Reduce(intersect, List(huex.probes$probeset_id, features))
for (feature in features) {
print(huex.probes[huex.probes$probeset_id == feature, ]$probeset_id)
}
for (feature in features) {
cat(feature, '-', huex.probes[as.character(huex.probes$probeset_id) == feature, ]$probeset_id)
}
for (feature in features) {
cat(feature, '-', huex.probes[as.character(huex.probes$probeset_id) == feature, ]$probeset_id, '\n')
}
View(huex.probes)
features[2]
huex.probes[huex.probes$probeset_id == features[2], ]$probeset_id
# Part 3.4.2: Keep only selected probes
huex.probes <- huex.probes[which(huex.probes$probeset_id %in% features), ]
View(huex.probes)
ncol(huex.probes)
c("2359439", rep('', 38))
# Part 3.4.2.1: Show probes not in the probeset annotation
print(features %in% huex.probes$probeset_id)
# Part 3.4.2.1: Show probes not in the probeset annotation
print(features[which(features %in% huex.probes$probeset_id)])
write.csv(huex.probes, paste(datadir, "../Export/Chosen Probes.csv", sep = ""), row.names = TRUE)
for ( probe in features[which(features %in% huex.probes$probeset_id)] ){
q <- paste(sep="","https://biodbnet-abcc.ncifcrf.gov/webServices/rest.php/biodbnetRestApi.json?method=db2db&input=affyid&inputValues=",probe,"&outputs=genesymbol&taxonId=9606&format=row")
results <- rbind(results,fromJSON(txt=q))
}
results <- []
results <- c()
for ( probe in features[which(features %in% huex.probes$probeset_id)] ){
q <- paste(sep="","https://biodbnet-abcc.ncifcrf.gov/webServices/rest.php/biodbnetRestApi.json?method=db2db&input=affyid&inputValues=",probe,"&outputs=genesymbol&taxonId=9606&format=row")
results <- rbind(results,fromJSON(txt=q))
}
BiocManager::install(
c(
"jsonlite"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(jsonlite, lib.loc = package_loc)
# Part 3.4.2.1: Show probes not in the probeset annotation
features.missed <- features[which(features %ni% huex.probes$probeset_id)]
print(features.missed)
results <- c()
for ( probe in features.missed ){
q <- paste(sep="","https://biodbnet-abcc.ncifcrf.gov/webServices/rest.php/biodbnetRestApi.json?method=db2db&input=affyid&inputValues=",probe,"&outputs=genesymbol&taxonId=9606&format=row")
results <- rbind(results,fromJSON(txt=q))
}
remove(Y)
q
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(genefilter, lib = package_loc); library(limma, lib = package_loc); library(ggvenn, lib = package_loc)
library(multtest, lib = package_loc); library(annaffy, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
library(corrplot, lib.loc = package_loc); library(factoextra, lib.loc = package_loc); library(car, lib.loc = package_loc)
library(jsonlite, lib.loc = package_loc)
# Part 4: Analysis
library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc); library(rminer, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
library(MASS, lib.loc = package_loc); library(Metrics, lib.loc = package_loc);
library(Hmisc, lib.loc = package_loc); library(caret, lib.loc = package_loc);
features
remove(ho, P, toptab)
BiocManager::install(
c("gprofiler2"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
BiocManager::install(
c("gprofiler2"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(gprofiler2, lib.loc = package_loc)
featureNames(e)
gconvert(query = features, organism = "hsapiens",
target="ENSG", mthreshold = Inf, filter_na = TRUE)
gconvert(query = features, organism = "hsapiens",
target="AFFY_HUEX_1_0_ST_V2", mthreshold = Inf, filter_na = TRUE)
features
mapIds(pd.huex.1.0.st.v2, keys=as.character(ID), c("SYMBOL"), keytype="PROBEID")
BiocManager::install(
c("huex10stv2.db"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
View(pd.huex.1.0.st.v2)
BiocManager::install(
c("oneChannelGUI"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
BiocManager::install(
c("oneChannelGUI"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
as.numeric(features)
trControl.lda <- trCtrl.lda
remove(trCtrl.lda)
as.numeric(features)
huex.probes
huex.probes[, 'probeset_id' %in% features]
huex.probes['probeset_id' %in% features, ]
huex.probes[huex.probes$probeset_id %in% features, ]
nrow(huex.probes[huex.probes$probeset_id %in% features, ])
nrow(huex.probes[huex.probes$probeset_id %in% features, ])
huex.probes$probeset_id %in% features
huex.probes[which(huex.probes$probeset_id %in% features), ]
huex.probes[which(huex.probes$probeset_id %in% features), ]
which(huex.probes$probeset_id %in% features)
huex.probes[, which(huex.probes$probeset_id %in% features)]
huex.probes[1, which(huex.probes$probeset_id %in% features)]
huex.probes[, which(huex.probes$probeset_id %in% features)]
View(huex.probes[, which(huex.probes$probeset_id %in% features)])
which(huex.probes$probeset_id %in% features)
which(huex.probes$probeset_id %in% features)
which(features %in% huex.probes$probeset_id)
View(huex.probes[, which(huex.probes$probeset_id %in% features)]$probeset_id)
which(features %in% huex.probes$probeset_id)
features %in% huex.probes$probeset_id
View(huex.probes[, which(huex.probes$probeset_id %in% features)]$probeset_id)
huex.probes[, which(huex.probes$probeset_id %in% features)]$probeset_id
huex.probes[, which(features %in% huex.probes$probeset_id)]$probeset_id
huex.probes
View(huex.probes)
View(huex.probes)
# Part 1.5.4: Extracting probeset information
huex.probes <- read.csv(paste(probedir, 'HuEx-1_0-st-v2.na36.hg19.probeset.csv', sep = ''), comment.char = "#", header = TRUE)
huex.probes
View(huex.probes)
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
BiocManager::install(
c("tzdb", "vroom", "readr", "ggplot2",
"backports", "ggcorrplot", "locfit", "oligo", "ggpubr",
"pd.huex.1.0.st.v2", "BiocGenerics",
# Part 2: Explore
"genefilter", "limma", "ggvenn",
"multtest", "annaffy",
# Part 3: Dimension Reduction
"withr", "corrr", "idm", "irlba", "PCAtools",
"RMTstat", "biomaRt", "pROC", "nFactors",
"EFA.dimensions",
"corrplot", "factoextra", "car",
"jsonlite",
# Part 4: Analysis
"caret", "e1071", "lattice",  "naivebayes",
"class", "gmodels",
"rpart", "rpart.plot", "Hmisc",
"nnet", "rminer",
"randomForest",
"MASS", "Metrics"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
BiocManager::install(
c("tzdb", "vroom", "readr", "ggplot2",
"backports", "ggcorrplot", "locfit", "oligo", "ggpubr",
"pd.huex.1.0.st.v2", "BiocGenerics",
# Part 2: Explore
"genefilter", "limma", "ggvenn",
"multtest", "annaffy",
# Part 3: Dimension Reduction
"withr", "corrr", "idm", "irlba", "PCAtools",
"RMTstat", "biomaRt", "pROC", "nFactors",
"EFA.dimensions",
"corrplot", "factoextra", "car",
"jsonlite",
# Part 4: Analysis
"caret", "e1071", "lattice",  "naivebayes",
"class", "gmodels",
"rpart", "rpart.plot", "Hmisc",
"nnet", "rminer",
"randomForest",
"MASS", "Metrics"),
force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(genefilter, lib = package_loc); library(limma, lib = package_loc); library(ggvenn, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
library(corrplot, lib.loc = package_loc); library(factoextra, lib.loc = package_loc); library(car, lib.loc = package_loc)
library(jsonlite, lib.loc = package_loc)
# Part 4: Analysis
library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc); library(rminer, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
library(MASS, lib.loc = package_loc); library(Metrics, lib.loc = package_loc);
library(Hmisc, lib.loc = package_loc); library(caret, lib.loc = package_loc);
# Part 1.4: Define 'not in' func
'%ni%' <- Negate('%in%')
# Part 1.5: Extracting data
# Part 1.5.1: Get all Affymetrix CEL files from the directory
celFiles <- list.celfiles(paste(datadir, "CEL", sep = ""), full.names=TRUE)
# Part 1.5.2: Get the data from all CEL files
# Returns ExonFeatureSet
rawData <- read.celfiles(celFiles)
# Part 1.5.3: Get the probe-level information of ExonFeatureSet
# mm - mismatch matrix
# pm - perfect match matrix
get_matrix <- function(type, data) {
switch (type,
'intensity' = intensity(data),
'mm' = mm(data, subset = NULL, target='core'),
'pm' = pm(data, subset = NULL, target='core'),
'bg' = bg(data, subset = NULL),
'all' = c(intensity(data), mm(data, subset = NULL, target='core'), pm(data, subset = NULL, target='core'), bg(data, subset = NULL))
)
}
# Part 1.5.4: Extracting probeset information
huex.probes <- read.csv(paste(probedir, 'HuEx-1_0-st-v2.na36.hg19.probeset.csv', sep = ''), comment.char = "#", header = TRUE)
# A which for multidimensional arrays.
# Mark van der Loo 16.09.2011
#
# A Array of booleans
# returns a sum(A) x length(dim(A)) array of multi-indices where A == TRUE
#
multi.which <- function(A){
if ( is.vector(A) ) return(which(A))
d <- dim(A)
T <- which(A) - 1
nd <- length(d)
t( sapply(T, function(t){
I <- integer(nd)
I[1] <- t %% d[1]
sapply(2:nd, function(j){
I[j] <<- (t %/% prod(d[1:(j-1)])) %% d[j]
})
I
}) + 1 )
}
show_perfect_collinearity <- function(df) {
df <- cor(t(df))
print(multi.which(df == 1))
remove(df)
}
# Part 2: Exploration
# Part 2.1: Get information about the dataset
slotNames(rawData)
str(rawData)
head(rawData)
# Part 2.2: Show how many gene expressions in the raw data
dim(exprs(rawData))   # 6553600     169
# Part 2.3: Platform used for gene information
annotation(rawData)   # "pd.huex.1.0.st.v2"
# Part 2.4: Show all the probes used for this dataset
unique(probeNames(rawData))
# Part 2.5:
matplot(pm(rawData, subset = NULL, target='core'), type="l", xlab="Probe No.", ylab="PM Probe intensity")    # variability of the data within and between probes
# Part 2.6: Turn probe-level information to gene-level data by normalization using RMA
# RMA - Robust Multi-Array Average (http://www.sthda.com/english/wiki/affymetrix-cel-files)
# Returns ExpressionSet
e <- rma(rawData)
# Part 2.7: Show details about the preprocessed values
str(e)
head(e)
# Part 2.8: Rename the columns of exprs(e)
colnames.e <- colnames(e)
for (i in 1:length(colnames.e)) {
colnames.e[i] <- strsplit(colnames.e[i], split = "_")[[1]][1]
}
colnames(e) <- colnames.e
data <- as.data.frame(exprs(e))
# Part 2.8: View data as box and whiskers
boxplot(data)
# Part 2.9: Check if expression set is normally distributed
p.vals <- rbind(
apply(data, 1, function(x) shapiro.test(as.matrix(x))$p.value),
apply(data, 1, function(x) kruskal.test(as.numeric(x) ~ as.factor(x))$p.value)
)
p.vals <- as.data.frame(p.vals)
row.names(p.vals) <- c("Normality: Shapiro-Wilk", "Population Equality: Kruskal-Wallis")
print(p.vals[1:10])
# Part 2.10: Create factors for each diagnosis
# Part 2.10.1: Replace string to integer classification
# Diagnosis from each sample in GEO
# CTL - 9, With Disorder - 1
diagnosis <- c(
# 299-309
9, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1,
# 310-320
1, 1, 1, 9, 1, 1, 1, 1, 1, 9, 1,
# 321-331
1, 9, 1, 9, 1, 9, 9, 9, 1, 1, 9,
# 332-342
1, 9, 1, 1, 9, 1, 1, 9, 1, 1, 1,
# 343-353
9, 1, 9, 1, 9, 1, 1, 1, 1, 9, 1,
# 354-364
9, 9, 1, 9, 1, 1, 1, 9, 1, 9, 1,
# 365-375
1, 9, 9, 1, 9, 9, 9, 1, 1, 9, 1,
# 376-386
9, 1, 1, 9, 1, 1, 1, 1, 1, 9, 1,
# 387-397
9, 1, 1, 9, 1, 9, 1, 9, 1, 1, 1,
# 398-408
9, 9, 1, 1, 1, 9, 9, 9, 9, 1, 1,
# 409-419
9, 9, 1, 1, 9, 1, 1, 1, 1, 1, 1,
# 420-430
9, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1,
# 431-441
1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1,
# 442-452
9, 9, 1, 9, 9, 1, 1, 9, 1, 9, 1,
# 453-463
1, 1, 9, 1, 9, 1, 9, 9, 9, 9, 9,
# 464-476
9, 9, 1, 1
)
diagnosis.binom <- diagnosis
diagnosis.binom[which(diagnosis.binom != 9)] <- 1
# Part 2.10.2: Create factors for each diagnosis
diagnosis.fact <- factor(diagnosis, ordered = FALSE)
diagnosis.binom.fact <- factor(diagnosis.binom, ordered = FALSE)
# Part 2.11: Alpha computation
# Perform Bonferroni correction
get_alpha <- function(alpha_orig, n) {
return(alpha_orig/n)
}
alpha <- 0.05
# Part 2.11: Check the normality of gene expressions per patient
# Part 2.11.1: Pick 5000 features; 5000 is the limit for shapiro.test()
testgenes.patient <- data[sample(rownames(data), 5000), ]
# Part 2.11.2: Perform tests on the column (patient)
p.vals.patient <- rbind(
apply(testgenes.patient, 2, function(x) shapiro.test(as.matrix(x))$p.value),
apply(testgenes.patient, 2, function(x) kruskal.test(as.numeric(x) ~ as.factor(x))$p.value)
)
row.names(p.vals.patient) <- c("Normality: Shapiro-Wilk", "Population Equality: Kruskal-Wallis")
p.vals.patient <- as.data.frame(p.vals.patient)
# Part 2.11.3: Check which of the patients have non-normal distribution of gene expressions
# Ho: The gene expressions are normally distributed.
# Ha: The gene expressions are not normally distributed.
print(colnames(p.vals.patient[1, which(p.vals.patient[1, ] < alpha)]))
# "In case the gene expression values over the patients are non-normally distributed one may want
# to subtract the median and divide by the MAD." (Krijnen)
data.pp <- data1 <- e[, colnames(p.vals.patient[1, which(p.vals.patient[1, ] < alpha)])]   # Get only those with
mads <- apply(exprs(data1), 2, mad)
meds <- apply(exprs(data1), 2, median)
dat <- sweep(exprs(data1), 2, meds)
exprs(data.pp) <- sweep(dat, 2, mads, FUN="/")
boxplot(exprs(data.pp))
# Remove rawData variable to save space
rm(rawData, celFiles, data1)
# Part 1: Setting up
exportsubdir <- "Part 1 - Setup"
exportdir <- paste(dirname(rstudioapi::getSourceEditorContext()$path), "/Export", sep = "")
# Part 1.1: Sets the location of the data to be used and where the packages should be put
datadir <- "E:/jmcco/Downloads/BNF 300.2 Data/GSE208338_RAW/"
#probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/Affymetrix_HuEx/"
probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/HuEx-1_0-st-v2-na36-hg19 Probeset/"
setwd(datadir)
package_loc <- paste(datadir, "lib", sep = "")
library(BiocManager, lib.loc = package_loc)
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(withr, lib = package_loc); library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(withr, lib = package_loc); library(ggplot2, lib = package_loc);
library(genefilter, lib = package_loc); library(memoise, lib = package_loc); library(limma, lib = package_loc); library(labeling, lib = package_loc); library(farver, lib = package_loc); library(ggvenn, lib = package_loc)
library(multtest, lib = package_loc);  library(pkgconfig, lib = package_loc);  library(GO.db, lib = package_loc); library(annaffy, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(rappdirs, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
library(corrplot, lib.loc = package_loc); library(factoextra, lib.loc = package_loc); library(car, lib.loc = package_loc)
library(jsonlite, lib.loc = package_loc); library(backports, lib.loc = package_loc); library(Hmisc, lib.loc = package_loc);
# Part 4: Analysis
library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc); library(rminer, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
library(MASS, lib.loc = package_loc); library(Metrics, lib.loc = package_loc);
library(caret, lib.loc = package_loc);
exportdir <- paste(dirname(rstudioapi::getSourceEditorContext()$path), "/Export", sep = "")
# Part 3: Data Preparation
exportsubdir <- "Step 3 - Dim Redux"
dir.create(paste(exportdir, exportsubdir, sep = "/"), recursive=TRUE)
saveHTML(atab, file=paste(exportdir, exportsubdir, "Gene Filtering Probe Names.html", sep = "/"))
# Step 3.1.9: Export
write.csv(features.gf.1, paste(exportdir, exportsubdir, "Features (Gene Filter - COV).csv", sep = "/"), row.names = TRUE)
write.csv(features.gf.2, paste(exportdir, exportsubdir, "Features (Gene Filter - T-test).csv", sep = "/"), row.names = TRUE)
write.csv(features.gf.3, paste(exportdir, exportsubdir, "Features (Gene Filter - ANOVA).csv", sep = "/"), row.names = TRUE)
write.csv(features.gf, paste(exportdir, exportsubdir, "Features (Gene Filter - Combined).csv", sep = "/"), row.names = TRUE)
# Step 3.2.16: Export
write.csv(features.pca.1, paste(exportdir, exportsubdir, "Features (PCA - plotloadings).csv", sep = "/"), row.names = TRUE)
write.csv(features.pca.2, paste(exportdir, exportsubdir, "Features (PCA - Fviz).csv", sep = "/"), row.names = TRUE)
write.csv(features.pca, paste(exportdir, exportsubdir, "Features (Gene Filter - Combined).csv", sep = "/"), row.names = TRUE)
# Step 3.3.7: Export
write.csv(features, paste(exportdir, exportsubdir, "Features (GF + PCA).csv", sep = "/"), row.names = TRUE)
# Part 3.4: Splitting dataset
createDataset <- function(dataSource, features, probeset, filename) {
# Part 3.4.1: Get only the chosen features
data <- as.matrix(exprs(dataSource)[features, ])
# Part 3.4.2: Keep only selected probes
huex.probes <- huex.probes[which(probeset$probeset_id %in% features), ]
# Part 3.4.2.1: Show probes not in the probeset annotation
features.missed <- features[which(features %ni% probeset$probeset_id)]
print("Unannotated Features")
print(features.missed)
# Part 3.4.3: Insert the diagnosis factor in the dataframe
data <- rbind(data, diagnosis)
data <- as.data.frame(t(data))
data$diagnosis <- factor(data$diagnosis, ordered = FALSE)
# Step 3.4.4: Export
write.csv(data, paste(exportdir, exportsubdir, paste(filename, " Chosen Dataset.csv", sep = ""), sep = "/"), row.names = TRUE)
write.csv(huex.probes, paste(exportdir, exportsubdir, paste(filename, " Chosen Dataset.csv", sep = ""), sep = "/"), row.names = TRUE)
return(data)
}
# Step 3.6: Export
write.csv(features.missed, paste(exportdir, exportsubdir, "Features (Unannotated).csv", sep = "/"), row.names = TRUE)
# Part 4: Machine Learning
exportsubdir <- "Step 4 - Analysis"
dir.create(paste(exportdir, exportsubdir, sep = "/"), recursive=TRUE)
# Part 4.3: Perform ML
# Part 4.3.1: Gene Filtering Dataset
data.multinomial <- createDataset(data.pp, features.gf, huex.probes, "Gene Filtering")
sets <- buildTrainTest(data.multinomial)
trainset.multinomial <- sets$trainset
testset.multinomial <- sets$testset
remove(sets)
# Part 4.3.1.2.7: Decision Tree
learn.gf.dt <- perform_learning("DT", trainset.multinomial, testset.multinomial, export.filename = paste(exportdir, exportsubdir, "Decision Tree (Gene Filter).pdf", sep = "/"))
# Part 4.3.1.2.7: Decision Tree
learn.gf.dt <- perform_learning("DT", trainset.multinomial, testset.multinomial, export.filename = paste(exportdir, exportsubdir, "Decision Tree (Gene Filter).pdf", sep = "/"))
# Part 4.3.2: PCA Dataset
data.multinomial <- createDataset(data.pp, features.pca, huex.probes, "PCA")
sets <- buildTrainTest(data.multinomial)
trainset.multinomial <- sets$trainset
testset.multinomial <- sets$testset
remove(sets)
# Part 4.3.2.2.7: Decision Tree
learn.pca.dt <- perform_learning("DT", trainset.multinomial, testset.multinomial, export.filename = paste(exportdir, exportsubdir, "Decision Tree (PCA).pdf", sep = "/"))
# Part 4.3.2.2.8: Random Forest  (For PCA, SVM tuning had no significant features)
#learn.pca.rf <- perform_learning("RF", trainset.multinomial, testset.multinomial, rf.ntree = 201, rf.mtry = 10)
# Part 4.3.3: Combined Dataset
data.multinomial <- createDataset(data.pp, features, huex.probes, "")
sets <- buildTrainTest(data.multinomial)
trainset.multinomial <- sets$trainset
testset.multinomial <- sets$testset
remove(sets)
# Part 4.3.3.2.7: Decision Tree
learn.features.dt <- perform_learning("DT", trainset.multinomial, testset.multinomial, export.filename = paste(exportdir, exportsubdir, "Decision Tree (GF + PCA).pdf", sep = "/"))
# Part 4.3: Perform ML
# Part 4.3.1: Gene Filtering Dataset
data.multinomial <- createDataset(dataSource = data.pp, feature = features.gf, probeset = huex.probes, filename = "Gene Filtering")
# Part 4.3.2: PCA Dataset
data.multinomial <- createDataset(dataSource = data.pp, feature = features.pca, probeset = huex.probes, filename = "PCA")
# Part 4.3.2.2.8: Random Forest  (For PCA, SVM tuning had no significant features)
#learn.pca.rf <- perform_learning("RF", trainset.multinomial, testset.multinomial, rf.ntree = 201, rf.mtry = 10)
# Part 4.3.3: Combined Dataset
data.multinomial <- createDataset(dataSource = data.pp, feature = features, probeset = huex.probes, filename = "PCA + GF")
# Part 5 - Ranking
exportsubdir <- "Step 5 - Ranking"
dir.create(paste(exportdir, exportsubdir, sep = "/"), recursive=TRUE)
# Step 5.2: Export
write.csv(ranking, paste(exportdir, exportsubdir, "Ranking.csv", sep = "/"), row.names = TRUE)
# Step 5.3: Get data from annotation
write.csv(huex.probes[, which(huex.probes$probeset_id %in% features)], paste(exportdir, exportsubdir, "Annotated Features.csv", sep = "/"), row.names = TRUE)
# Step 5.2: Export
write.csv(ranking, paste(exportdir, exportsubdir, "Ranking.csv", sep = "/"), row.names = TRUE)
save.image("E:/jmcco/OneDrive - University of the Philippines/School/AY 2022-2023/2nd Sem/HI 299 Research Methods in Health Informatics/HI 299 Project/DLPFC-Gene-Expression/Multinomial/.RData")
