learn.gf.log <- perform_learning("LOG", trainset.multinomial[, features.selected], testset.multinomial[, features.selected])
learn.gf.log$var
# Part 4.2: Create a function for each ML
perform_learning <- function(method, trainset, testset,
svm.kernel = NULL,
svm.cost = NULL,
rf.ntree = NULL,
rf.mtry = NULL,
export.filename = NULL,
tune = FALSE) {
if (method == "NB") {
# Part 4.1: Naive Bayes
set.seed(100)
model.nb <- train(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
method = "naive_bayes",
trControl = trainControl(method='cv', number=10)
)
pred.model.nb <- predict(model.nb, newdata = testset[, colnames(trainset) != "diagnosis"])
roc.model.nb <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.nb,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.nb <- confusionMatrix(pred.model.nb, testset$diagnosis)
var.model.nb <- varImp(model.nb, useModel = TRUE, nonpara = TRUE, scale = TRUE)
return(list(model = model.nb, pred = pred.model.nb, confMatrix = confMatrix.model.nb, var = var.model.nb, roc = roc.model.nb))
} else if (method == "KNN") {
# Part 4.2: K Nearest Neighbors
set.seed(100)
trControl.knn <- trainControl(method='repeatedcv', number = 3, allowParallel = TRUE)
trainset.preprocessed <- preProcess(trainset[, colnames(trainset) != "diagnosis"])
model.knn <- train(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
method = "knn",
trControl = trControl.knn,
tuneLength = 20
)
pred.model.knn <- predict(model.knn, newdata = testset)
roc.model.knn <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.knn,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.knn <- confusionMatrix(pred.model.knn, testset$diagnosis)
var.model.knn <- varImp(model.knn, useModel = TRUE, nonpara = TRUE, scale = TRUE)
return(list(model = model.knn, pred = pred.model.knn, confMatrix = confMatrix.model.knn, var = var.model.knn, roc = roc.model.knn))
} else if (method == "DT") {
# Part 4.3: Decision Tree
# Part 4.3.1: Using rpart
model.dt <- rpart(formula = diagnosis ~ .,
data = trainset,
method = "class",
control = rpart.control(minsplit=2, minbucket = 1, cp = 0.001)
)
var.model.dt<- varImp(model.dt, useModel = TRUE, nonpara = TRUE, scale = TRUE)
arrange(var.model.dt, desc(Overall))
rpart.plot(model.dt)
pdf(export.filename)
prp(model.dt, extra=104)
dev.off()
# Part 4.3.2: Using train
## 10-fold CV
## repeated ten times
trControl.dt <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 10)
model.dt <- train(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
method = "rpart2",
trControl = trControl.dt
)
pred.model.dt <- predict(model.dt, newdata = testset)
roc.model.dt <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.dt,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.dt <- confusionMatrix(pred.model.dt, testset$diagnosis)
return(list(model = model.dt, pred = pred.model.dt, confMatrix = confMatrix.model.dt, var = var.model.dt, roc = roc.model.dt))
} else if (method == "SVM") {
# Part 4.4: SVM
# For SVM and random forest, cut the dataset to 10% of the dataset to make processing quicker
#trainset.cut <- trainset[sample(x = 1:nrow(trainset), size = nrow(trainset) * .10, replace = TRUE), colnames(trainset)]
#trainset.cut <- upSample(x = trainset.cut[, colnames(trainset.cut) %ni% "ADDEPEV3"], yname = "ADDEPEV3", y = trainset.cut$ADDEPEV3)
if (tune) {
kernels <- c("rbfdot", "polydot", "tanhdot", "vanilladot", "laplacedot", "besseldot", "anovadot", "splinedot")
costs <- c(0.001, 0.01, 0.1, 1, 5, 10, 100)
} else {
kernels <- c(svm.kernel)
costs <- c(svm.cost)
}
for (kernel in kernels) {
for (cost in costs) {
model.svm <- rminer::fit(diagnosis ~ .,
data = trainset,
model = "svm",
kernel = kernel,
kpar = "automatic",
C = cost,
task = "class"
)
pred.model.svm <- predict(model.svm, newdata = testset)
confMatrix.model.svm <- confusionMatrix(pred.model.svm, testset$diagnosis)
if (tune && confMatrix.model.svm$overall['AccuracyPValue'] < 0.05) {
print(paste(kernel," @ ", cost))
print(confMatrix.model.svm)
}
var.model.svm <- Importance(model.svm, data = trainset)
if (!tune) {
roc.model.svm <- multiclass.roc(response = testset$diagnosis,
predictor = predict(rminer::fit(diagnosis ~ .,
data = trainset,
model = "svm",
kernel = kernel,
kpar = "automatic",
C = cost
),
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
}
}
}
if (!tune) {
return(list(model = model.nb, pred = pred.model.nb, confMatrix = confMatrix.model.nb, var = var.model.nb, roc = roc.model.svm))
}
} else if (method == "LOG") {
model.logit <- multinom(diagnosis ~ .,
data = trainset)
pred.model.logit <- predict(model.logit, newdata = testset[, colnames(testset) != "diagnosis"], type = "class")
roc.model.logit <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.logit,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
confMatrix.model.logit <- confusionMatrix(pred.model.logit, testset$diagnosis)
var.model.logit <- varImp(model.logit, useModel = TRUE, nonpara = TRUE, scale = TRUE)
#summary(model.logit)
#View(cbind("coeff" = coef(model.logit), "odds ratio" = (exp(coef(model.logit)) - 1) * 100)) # Odds ratio
return(list(model = model.logit, pred = pred.model.logit, confMatrix = confMatrix.model.logit, var = var.model.logit, roc = roc.model.logit))
} else if (method == "DA") {
# Part 4.6: Discriminant Analysis
trCtrl.lda <- trainControl(classProbs = TRUE)
levels(trainset$diagnosis)[match("1",levels(trainset$diagnosis))] <- "BPD"
levels(trainset$diagnosis)[match("2",levels(trainset$diagnosis))] <- "MDD"
levels(trainset$diagnosis)[match("3",levels(trainset$diagnosis))] <- "SCZ"
levels(trainset$diagnosis)[match("9",levels(trainset$diagnosis))] <- "CTL"
model.lda <- train(diagnosis ~ .,
data = trainset,
method = "lda",
trControl = trCtrl.lda)
levels(testset$diagnosis)[match("1",levels(testset$diagnosis))] <- "BPD"
levels(testset$diagnosis)[match("2",levels(testset$diagnosis))] <- "MDD"
levels(testset$diagnosis)[match("3",levels(testset$diagnosis))] <- "SCZ"
levels(testset$diagnosis)[match("9",levels(testset$diagnosis))] <- "CTL"
var.model.lda <- varImp(model.lda, useModel = TRUE, nonpara = TRUE, scale = TRUE)
model.lda <- lda(diagnosis ~ .,
data = trainset,
)
pred.model.lda <- predict(model.lda, newdata = testset)
roc.model.lda <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.lda,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob")$posterior,
percent = TRUE)
confMatrix.model.lda <- confusionMatrix(pred.model.lda$class, testset$diagnosis)
#return(list(model = model.lda, pred = pred.model.lda, confMatrix = confMatrix.model.lda, var = var.model.lda))
return(list(model = model.lda, pred = pred.model.lda, confMatrix = confMatrix.model.lda, var = var.model.lda, roc = roc.model.lda))
} else if (method == "RF") {
# Part 4.7: Random Forest
set.seed(100)
if (tune) {
mtries <- sort.int(sample(ncol(trainset)-1, 5))
ntrees <- c(201, 501, 1501, 2501, 3501)
} else {
mtries <- c(rf.mtry)
ntrees <- c(rf.ntree)
}
for(ntree in ntrees) {
for(mtry in mtries) {
model.rf <- randomForest(x = trainset[, colnames(trainset) != "diagnosis"],
y = trainset$diagnosis,
ntree = ntree,
mtry = mtry
)
pred.model.rf <- predict(model.rf, newdata = testset)
if (!tune) {
roc.model.rf <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.rf,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
}
confMatrix.model.rf <- confusionMatrix(pred.model.rf, testset$diagnosis)
if (tune && confMatrix.model.rf$overall['AccuracyPValue'] < 0.05) {
print(paste(ntree," and ", mtry))
print(confMatrix.model.rf)
}
var.model.rf <- varImp(model.rf, useModel = TRUE, nonpara = TRUE, scale = TRUE)
var.model.rf <- arrange(var.model.rf, desc(Overall))
}
}
if (!tune) {
return(list(model = model.rf, pred = pred.model.rf, confMatrix = confMatrix.model.rf, var = var.model.rf, roc = roc.model.rf))
}
} else {
model.auto <- rminer::fit(diagnosis ~ .,
data = trainset,
model = "auto",
fdebug = TRUE,
search = list(
search = mparheuristic(
model = c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","lssvm","mlp","mlpe", "randomForest","lda","multinom", "naiveBayes","xgboost"),
task = "class",
inputs = ncol(trainset)-1
),
smethod = "auto",
metric = "AUC",
convex = 0
)
)
pred.model.auto <- predict(model.auto, testset)
roc.model.auto <- multiclass.roc(response = testset$diagnosis,
predictor = predict(model.auto,
newdata = testset[, colnames(testset) != "diagnosis"],
type = "prob"),
percent = TRUE)
var.model.auto <- Importance(model.auto, data = trainset, method = "DSA")
# show leaderboard:
cat("Models  by rank:", model.auto@mpar$LB$model, "\n")
cat("Validation values:", round(model.auto@mpar$LB$eval,4), "\n")
cat("Best model:", model.auto@model, "\n")
cat("AUC", "=", round(mmetric(testset$diagnosis, pred.model.auto, metric="AUC"),2), "\n")
return(list(model = model.auto, pred = pred.model.auto, confMatrix = c(), var = var.model.auto, roc = roc.model.auto))
}
}
# Part 4.3: Perform ML
# Part 4.3.1: Gene Filtering Dataset
features.selected <- c(features.gf, "diagnosis")
# Part 4.3.1.2.5: Logistic Regression
learn.gf.log <- perform_learning("LOG", trainset.multinomial[, features.selected], testset.multinomial[, features.selected])
gsub("`", "", var.model.logit, fixed = T)
var.model.logit''
var.model.logit
var.model.logit[,1]
var.model.logit[1]
var.model.logit[1,]
var.model.logit[1,1]
gsub("`", "", rownames(var.model.logit), fixed = T)
ranking <- list(
naive_bayes.gf = rownames(learn.gf.nb$var$importance)[1:20],
naive_bayes.pca = rownames(learn.pca.nb$var$importance)[1:20],
naive_bayes.features = rownames(learn.features.nb$var$importance)[1:20],
knn.gf = rownames(learn.gf.knn$var$importance)[1:20],
knn.pca = rownames(learn.pca.knn$var$importance)[1:20],
knn.features = rownames(learn.features.knn$var$importance)[1:20],
svm.gf = rownames(learn.gf.svm$var$importance)[1:20],
svm.pca = rep('NA', 20),
svm.features = rownames(learn.features.svm$var$importance)[1:20],
logistic_regression.gf = gsub("`", "", rownames(learn.gf.log$var), fixed = T)[1:20],
logistic_regression.pca = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
logistic_regression.features = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
discriminant_analysis.gf = rownames(learn.gf.da$var$importance)[1:20],
discriminant_analysis.pca = rownames(learn.pca.da$var$importance)[1:20],
discriminant_analysis.features = rownames(learn.features.da$var$importance)[1:20],
decision_tree.gf = rownames(learn.gf.dt$var)[1:20],
decision_tree.pca = rownames(learn.pca.dt$var)[1:20],
decision_tree.features = rownames(learn.features.dt$var)[1:20],
random_forest.gf = rownames(learn.gf.rf$var$Overall)[1:20],
random_forest.pca = rep('NA', 20),
random_forest.features = rep('NA', 20)
)
write.csv(ranking, paste(datadir, "../Export/Ranking.csv", sep = ""), row.names = TRUE)
learn.gf.rf$var
ranking <- list(
naive_bayes.gf = rownames(learn.gf.nb$var$importance)[1:20],
naive_bayes.pca = rownames(learn.pca.nb$var$importance)[1:20],
naive_bayes.features = rownames(learn.features.nb$var$importance)[1:20],
knn.gf = rownames(learn.gf.knn$var$importance)[1:20],
knn.pca = rownames(learn.pca.knn$var$importance)[1:20],
knn.features = rownames(learn.features.knn$var$importance)[1:20],
svm.gf = rownames(learn.gf.svm$var$importance)[1:20],
svm.pca = rep('NA', 20),
svm.features = rownames(learn.features.svm$var$importance)[1:20],
logistic_regression.gf = gsub("`", "", rownames(learn.gf.log$var), fixed = T)[1:20],
logistic_regression.pca = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
logistic_regression.features = gsub("`", "", rownames(learn.pca.log$var), fixed = T)[1:20],
discriminant_analysis.gf = rownames(learn.gf.da$var$importance)[1:20],
discriminant_analysis.pca = rownames(learn.pca.da$var$importance)[1:20],
discriminant_analysis.features = rownames(learn.features.da$var$importance)[1:20],
decision_tree.gf = rownames(learn.gf.dt$var)[1:20],
decision_tree.pca = rownames(learn.pca.dt$var)[1:20],
decision_tree.features = rownames(learn.features.dt$var)[1:20],
random_forest.gf = rownames(learn.gf.rf$var)[1:20],
random_forest.pca = rep('NA', 20),
random_forest.features = rep('NA', 20)
)
write.csv(ranking, paste(datadir, "../Export/Ranking.csv", sep = ""), row.names = TRUE)
# Step 3.4.7: Export
write.csv(data.multinomial, paste(datadir, "../Export/Chosen Dataset.csv", sep = ""), row.names = TRUE)
write.csv(ids.ensembl, paste(datadir, "../Export/Chosen Dataset Ensembl.csv", sep = ""), row.names = TRUE)
ids.ensembl
View(ids.ensembl)
# Part 1.5.4: Extracting probeset information
ids.ensembl <- read_tsv(paste(probedir, 'Affymetrix_HuEx_microarray_probeset_IDs_to_Ensemble_IDs.tsv', sep = ''))
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 1.5.4: Extracting probeset information
ids.ensembl <- read_tsv(paste(probedir, 'Affymetrix_HuEx_microarray_probeset_IDs_to_Ensemble_IDs.tsv', sep = ''))
ids.ensembl <- as.data.frame(ids.ensembl)
ids.ensembl[ids.ensembl$id_internal_huex == '2385696']
ids.ensembl[ids.ensembl$id_internal_huex == '2385696', ]
View(ids.ensembl)
View(ids.ensembl)
ids.ensembl[ids.ensembl$id_internal_huex == 2385696, ]
ids.ensembl[ids.ensembl$id_internal_huex == 2385696]
ids.ensembl[ids.ensembl$id_internal_huex == 2385696, ]
ids.ensembl[ids.ensembl$id_internal_huex == '2315714', ]
ids.ensembl[ids.ensembl$id_internal_huex == '2385696', ]
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(genefilter, lib = package_loc); library(limma, lib = package_loc); library(ggvenn, lib = package_loc)
library(multtest, lib = package_loc); library(annaffy, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
help('read.csv')
#probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/Affymetrix_HuEx/"
probedir <- "E:/jmcco/Downloads/BNF 300.2 Data/HuEx-1_0-st-v2-na36-hg19 Probeset/"
huex.probes <- read.csv(paste(probedir, 'HuEx-1_0-st-v2.na36.hg19.probeset.csv', sep = ''), comment.char = "#", header = TRUE)
head(huex.probes)
VIew(huex.probes)
View(huex.probes)
huex.probes[huex.probes$probeset_id %in% features]
huex.probes$probeset_id
huex.probes[probeset_id %in% features]
huex.probes$probeset_id %in% features
huex.probes[huex.probes$probeset_id %in% features, ]
remove(ids.ensembl, get_probe_info())
remove(ids.ensembl, get_probe_info
)
# Part 3.4.2: Keep only selected probes
huex.probes <- huex.probes[huex.probes$probeset_id %in% features, ]
View(huex.probes)
View(huex.probes)
features
features[features == '2536332']
# Part 1.5.4: Extracting probeset information
huex.probes <- read.csv(paste(probedir, 'HuEx-1_0-st-v2.na36.hg19.probeset.csv', sep = ''), comment.char = "#", header = TRUE)
length(huex.probes$probeset_id %in% features)
count(huex.probes$probeset_id %in% features)
length(huex.probes$probeset_id %in% features)
nrow(huex.probes)
huex.probes$probeset_id %in% features
huex.probes$probeset_id %in% features == TRUE
features
huex.probes[features %in% huex.probes$probe_id, ]
huex.probes[features %in% huex.probes$probeset_id, ]
nrow(huex.probes[features %in% huex.probes$probeset_id, ])
nrow(huex.probes[, features %in% huex.probes$probeset_id])
nrow(huex.probes[features %in% huex.probes$probeset_id])
length(features %in% huex.probes$probeset_id)
length(features)
# Part 3.4.2: Keep only selected probes
huex.probes <- huex.probes[features %in% huex.probes$probeset_id, ]
features %in% huex.probes$probeset_id
huex.probes$probeset_id %in% features
length((huex.probes$probeset_id %in% features) == TRUE)
which(huex.probes$probeset_id %in% features)
which(features %in% huex.probes$probeset_id)
View(huex.probes)
View(huex.probes)
# Part 1.5.4: Extracting probeset information
huex.probes <- read.csv(paste(probedir, 'HuEx-1_0-st-v2.na36.hg19.probeset.csv', sep = ''), comment.char = "#", header = TRUE)
which(features %in% huex.probes$probeset_id)
features
View(huex.probes)
data.multinomial$2385696
data.multinomial$'2385696'
which(features %in% huex.probes$probeset_id)
which(huex.probes$probeset_id %in% features)
Reduce(intersect, List(huex.probes$probeset_id, features))
for (feature in features) {
print(huex.probes[huex.probes$probeset_id == feature, ]$probeset_id)
}
for (feature in features) {
cat(feature, '-', huex.probes[as.character(huex.probes$probeset_id) == feature, ]$probeset_id)
}
for (feature in features) {
cat(feature, '-', huex.probes[as.character(huex.probes$probeset_id) == feature, ]$probeset_id, '\n')
}
View(huex.probes)
features[2]
huex.probes[huex.probes$probeset_id == features[2], ]$probeset_id
# Part 3.4.2: Keep only selected probes
huex.probes <- huex.probes[which(huex.probes$probeset_id %in% features), ]
View(huex.probes)
ncol(huex.probes)
c("2359439", rep('', 38))
# Part 3.4.2.1: Show probes not in the probeset annotation
print(features %in% huex.probes$probeset_id)
# Part 3.4.2.1: Show probes not in the probeset annotation
print(features[which(features %in% huex.probes$probeset_id)])
write.csv(huex.probes, paste(datadir, "../Export/Chosen Probes.csv", sep = ""), row.names = TRUE)
for ( probe in features[which(features %in% huex.probes$probeset_id)] ){
q <- paste(sep="","https://biodbnet-abcc.ncifcrf.gov/webServices/rest.php/biodbnetRestApi.json?method=db2db&input=affyid&inputValues=",probe,"&outputs=genesymbol&taxonId=9606&format=row")
results <- rbind(results,fromJSON(txt=q))
}
results <- []
results <- c()
for ( probe in features[which(features %in% huex.probes$probeset_id)] ){
q <- paste(sep="","https://biodbnet-abcc.ncifcrf.gov/webServices/rest.php/biodbnetRestApi.json?method=db2db&input=affyid&inputValues=",probe,"&outputs=genesymbol&taxonId=9606&format=row")
results <- rbind(results,fromJSON(txt=q))
}
BiocManager::install(
c(
"jsonlite"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(jsonlite, lib.loc = package_loc)
# Part 3.4.2.1: Show probes not in the probeset annotation
features.missed <- features[which(features %ni% huex.probes$probeset_id)]
print(features.missed)
results <- c()
for ( probe in features.missed ){
q <- paste(sep="","https://biodbnet-abcc.ncifcrf.gov/webServices/rest.php/biodbnetRestApi.json?method=db2db&input=affyid&inputValues=",probe,"&outputs=genesymbol&taxonId=9606&format=row")
results <- rbind(results,fromJSON(txt=q))
}
remove(Y)
q
library(Biobase, lib.loc = package_loc); library(BiocSingular, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(backports, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc); library(ggpubr, lib = package_loc);
library(BiocGenerics, lib.loc = package_loc); library(dplyr, lib.loc = package_loc);
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(genefilter, lib = package_loc); library(limma, lib = package_loc); library(ggvenn, lib = package_loc)
library(multtest, lib = package_loc); library(annaffy, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
library(corrplot, lib.loc = package_loc); library(factoextra, lib.loc = package_loc); library(car, lib.loc = package_loc)
library(jsonlite, lib.loc = package_loc)
# Part 4: Analysis
library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc); library(rminer, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
library(MASS, lib.loc = package_loc); library(Metrics, lib.loc = package_loc);
library(Hmisc, lib.loc = package_loc); library(caret, lib.loc = package_loc);
features
remove(ho, P, toptab)
BiocManager::install(
c("gprofiler2"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
BiocManager::install(
c("gprofiler2"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(gprofiler2, lib.loc = package_loc)
featureNames(e)
gconvert(query = features, organism = "hsapiens",
target="ENSG", mthreshold = Inf, filter_na = TRUE)
gconvert(query = features, organism = "hsapiens",
target="AFFY_HUEX_1_0_ST_V2", mthreshold = Inf, filter_na = TRUE)
features
mapIds(pd.huex.1.0.st.v2, keys=as.character(ID), c("SYMBOL"), keytype="PROBEID")
BiocManager::install(
c("huex10stv2.db"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
View(pd.huex.1.0.st.v2)
BiocManager::install(
c("oneChannelGUI"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
BiocManager::install(
c("oneChannelGUI"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc); library(cowplot, lib.loc = package_loc); library(ggplotify, lib.loc = package_loc)
as.numeric(features)
trControl.lda <- trCtrl.lda
remove(trCtrl.lda)
