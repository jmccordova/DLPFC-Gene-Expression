apply(exprs(e), 1, function(x) shapiro.test(as.matrix(x))$p.value),
apply(exprs(e), 1, function(x) kruskal.test(as.numeric(x) ~ as.factor(x))$p.value)
)
p.vals <- as.data.frame(p.vals)
print(p.vals)
View(p.vals)
row.names(p.vals) <- c("Normality: Shapiro-Wilk", "Population Equality: Kruskal-Wallis")
View(p.vals)
remove(data.pheno)
save.image("E:/jmcco/OneDrive - University of the Philippines/School/AY 2022-2023/2nd Sem/HI 299 Research Methods in Health Informatics/HI 299 Project/DLPFC-Gene-Expression/Multinomial/.RData")
ggdensity(exprs(e), fill = "lightgray")
BiocManager::install(
c("ggpubr"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
# Part 2: Exploration
library(ggpubr, lib = package_loc)
ggdensity(exprs(e), fill = "lightgray")
rlang::last_trace()
View(e)
# Part 3.1.3: Get gene expressions
data <- exprs(e)
remove(e)
# Part 2.8: View data as box and whiskers
boxplot(data.frame(data))
# Part 2.6: Turn probe-level information to gene-level data by normalization using RMA
# RMA - Robust Multi-Array Average (http://www.sthda.com/english/wiki/affymetrix-cel-files)
# Returns ExpressionSet
e <- rma(rawData)
# Part 3.1.3: Get gene expressions
data <- as.data.frame(exprs(e))
# Part 2.8: View data as box and whiskers
boxplot(data)
# Part 2.9: Check if expression set is normally distributed
p.vals <- rbind(
apply(data, 1, function(x) shapiro.test(as.matrix(x))$p.value),
apply(data, 1, function(x) kruskal.test(as.numeric(x) ~ as.factor(x))$p.value)
)
p.vals <- as.data.frame(p.vals)
row.names(p.vals) <- c("Normality: Shapiro-Wilk", "Population Equality: Kruskal-Wallis")
print(p.vals)
print(p.vals[1:10])
# "In case the gene expression values over the patients are non-normally distributed one may want
# to subtract the median and divide by the MAD." (Krijnen)
data.pp <- data1 <- data[, ALL$mol == "ALL1/AF4"]   # Get only those with
# Part 2.10: Create factors for each diagnosis
# Part 2.10.1: Replace string to integer classification
# Diagnosis from each sample in GEO
# CTL - 9, BPD - 1, MDD - 2, SCZ - 3
diagnosis <- c(
# 299-309
9, 3, 2, 3, 1, 1, 2, 3, 3, 9, 3,
# 310-320
2, 1, 3, 9, 3, 2, 2, 1, 1, 9, 1,
# 321-331
1, 9, 1, 9, 1, 9, 9, 9, 3, 2, 9,
# 332-342
2, 9, 3, 2, 9, 2, 3, 9, 3, 2, 2,
# 343-353
9, 2, 9, 3, 9, 3, 3, 3, 3, 9, 3,
# 354-364
9, 9, 3, 9, 3, 3, 3, 9, 3, 9, 3,
# 365-375
3, 9, 9, 3, 9, 9, 9, 3, 3, 9, 3,
# 376-386
9, 3, 3, 9, 3, 3, 3, 3, 3, 9, 3,
# 387-397
9, 3, 3, 9, 3, 9, 3, 9, 3, 3, 3,
# 398-408
9, 9, 3, 3, 1, 9, 9, 9, 9, 2, 1,
# 409-419
9, 9, 2, 1, 9, 2, 1, 1, 3, 2, 1,
# 420-430
9, 3, 9, 3, 2, 3, 3, 2, 3, 3, 2,
# 431-441
3, 2, 3, 2, 3, 2, 3, 2, 9, 3, 2,
# 442-452
9, 9, 3, 9, 9, 3, 3, 9, 3, 9, 3,
# 453-463
3, 3, 9, 3, 9, 3, 9, 9, 9, 9, 9,
# 464-476
9, 9, 3, 3
)
# Part 2.10.2: Create factors for each diagnosis
diagnosis.fact <- factor(diagnosis, ordered = FALSE)
data[, which(diagnosis.fact)]
which(diagnosis == 9)
apply(data, 2, function(x) shapiro.test(as.matrix(x))$p.value)
data(ALL)
data(MLL.B, package = "ALLMLL")
data(ALL, package = "ALLMLL")
install.packages("ALLMLL")
data(ALL, package = "ALLMLL")
BiocManager::install("ALLMLL"
#force = TRUE,
dependencies = TRUE,
BiocManager::install("ALLMLL",
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
data(ALL, package = "ALLMLL")
library(ALLMLL, lib.loc = package_loc)
data(ALL, package = "ALLMLL")
data(ALL, package = "ALL")
library(ALL, lib.loc = package_loc)
data(ALL, package = "ALL")
View(ALL)
ALL$mol.biol
# Part 2.10.3: Insert the diagnosis in the phenodata
phenoData(e) <- diagnosis.fact
# Part 2.10.3: Insert the diagnosis in the phenodata
phenoData(e) <- diagnosis
help(phenoData)
pData(e)
pData(e) <- diagnosis.fact
help(sample)
test_matrix <- as.data.frame(data[, sample(1:nrow(data), 5000)])
data[, sample(1:nrow(data), 5000)]
sample(1:nrow(data), 5000)
data[, sample(1:nrow(data), 5000)]
test_matrix <- as.data.frame(data[, sample(colnames(data), 5000)])
data[, sample(colnames(data), 5000)]
View(e)
data[1]
testgenes.patient <- data[sample(rownames(data), 5000), ]
p.vals.patient <- rbind(
apply(testgenes.patient, 1, function(x) shapiro.test(as.matrix(x))$p.value),
apply(testgenes.patient, 1, function(x) kruskal.test(as.numeric(x) ~ as.factor(x))$p.value)
)
View(p.vals)
View(p.vals.patient)
p.vals.patient <- rbind(
apply(testgenes.patient, 2, function(x) shapiro.test(as.matrix(x))$p.value),
apply(testgenes.patient, 2, function(x) kruskal.test(as.numeric(x) ~ as.factor(x))$p.value)
)
View(p.vals.patient)
row.names(p.vals.patient) <- c("Normality: Shapiro-Wilk", "Population Equality: Kruskal-Wallis")
print(p.vals.patient[1:10])
print(p.vals.patient[,1:10])
View(testgenes.patient)
remove(test_matrix)
print(p.vals.patient[1,1:10])
p.vals.patient[1, which(p.vals.patient < 0.05)]
p.vals.patient[1, which(p.vals.patient < 0.05)]
which(p.vals.patient < 0.05)
which(p.vals.patient >= 0.05)
which(p.vals.patient[1, ] >= 0.05)
which(p.vals.patient[1] >= 0.05)
data[1, ] >= 0.05
data[2, ] >= 0.05
which(p.vals.patient[1, ] >= 0.05)
p.vals.patient[1, ] >= 0.05
alpha <- 0.05
p.vals.patient[1, ] >= 0.05
which(p.vals.patient[1, ] >= alpha)
which(p.vals.patient[1, ] < alpha)
View(p.vals.patient)
p.vals.patient <- as.data.frame(p.vals.patient)
which(p.vals.patient[1, ] < alpha)
print(p.vals.patient[1, which(p.vals.patient[1, ] < alpha)])
# Part 2.11.3: Check which of the patients have non-normal distribution of gene expressions
# Ho: The gene expressions are normally distributed.
# Ha: The gene expressions are not normally distributed.
print(colnames(p.vals.patient[1, which(p.vals.patient[1, ] < alpha)]))
# Part 2.1: Get information about the dataset
slotNames(rawData)
# Part 2.11: Alpha computation
# Perform Bonferroni correction
get_alpha <- function(alpha_orig, n) {
return(alpha_orig/n)
}
alpha <- 0.05
alpha <- get_alpha(alpha, ncol(data.multinomial - 1))
alpha <- get_alpha(alpha, ncol(data - 1))
alpha <- get_alpha(alpha, nrow(data - 1))
# Part 2.11.3: Check which of the patients have non-normal distribution of gene expressions
# Ho: The gene expressions are normally distributed.
# Ha: The gene expressions are not normally distributed.
print(colnames(p.vals.patient[1, which(p.vals.patient[1, ] < alpha)]))
# "In case the gene expression values over the patients are non-normally distributed one may want
# to subtract the median and divide by the MAD." (Krijnen)
data.pp <- data1 <- data[, colnames(p.vals.patient[1, which(p.vals.patient[1, ] < alpha)])]   # Get only those with
mads <- apply(exprs(data1), 2, mad)
# "In case the gene expression values over the patients are non-normally distributed one may want
# to subtract the median and divide by the MAD." (Krijnen)
data.pp <- data1 <- e[, colnames(p.vals.patient[1, which(p.vals.patient[1, ] < alpha)])]   # Get only those with
mads <- apply(exprs(data1), 2, mad)
meds <- apply(exprs(data1), 2, median)
dat <- sweep(exprs(data1), 2, meds)
exprs(data.pp) <- sweep(dat, 2, mads, FUN="/")
View(data.pp)
exprs(data.pp)
# Remove rawData variable to save space
rm(rawData, celFiles, data1)
boxplot(data.pp)
boxplot(exprs(data.pp))
# Part 3: Data Preparation
# Part 3.1: Gene Filtering
# Part 3.1.1: Coefficient of Variation (cv)
# cv = 1 - standard deviation equals the mean, so that the experimental effect is small relative to the precision of measurement. If,
# cv < 0.02 - the mean is ¯ve times larger than the standard deviation, so that both the experimental effect and the measurement precision are large.
cvval <- apply(exprs(ALL1pp),1,function(x){sd(x)/abs(mean(x))})
# Part 3: Data Preparation
# Part 3.1: Gene Filtering
# Part 3.1.1: Coefficient of Variation (cv)
# cv = 1 - standard deviation equals the mean, so that the experimental effect is small relative to the precision of measurement. If,
# cv < 0.02 - the mean is ¯ve times larger than the standard deviation, so that both the experimental effect and the measurement precision are large.
cvval <- apply(exprs(data.pp), 1, function(x){sd(x)/abs(mean(x))})
cvval < 0.2
cvval < 0.02
data.pp[cvval < 0.2, ]
data[cvval < 0.2, ]
data.filtered <- data[cvval < 0.2, ]
remove(data.filtered)
features.gf.1 <- rownames(data[cvval < 0.2, ])
remove(ALL)
library(Biobase, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(backports, lib.loc = package_loc); library(Hmisc, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc)
library(BiocGenerics, lib.loc = package_loc)
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(ggpubr, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
# Part 4: Analysis
library(caret, lib.loc = package_loc); library(dplyr, lib.loc = package_loc); library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
# Part 2: Preparing data
# Part 2.1: Get all Affymetrix CEL files from the directory
celFiles <- list.celfiles(paste(datadir, "CEL", sep = ""), full.names=TRUE)
# Get the data from all CEL files
# Returns ExonFeatureSet
rawData <- read.celfiles(celFiles)
# Part 2.6: Turn probe-level information to gene-level data by normalization using RMA
# RMA - Robust Multi-Array Average (http://www.sthda.com/english/wiki/affymetrix-cel-files)
# Returns ExpressionSet
# e <- rma(rawData)
e <- expresso(rawData,
bgcorrect.method = "rma",
normalize.method = "constant",
pmcorrect.method = "pmonly",
summary.method="avgdiff"
)
BiocManager::install(
c("affy"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(affy, lib.loc = package_loc)
# Part 2.6: Turn probe-level information to gene-level data by normalization using RMA
# RMA - Robust Multi-Array Average (http://www.sthda.com/english/wiki/affymetrix-cel-files)
# Returns ExpressionSet
# e <- rma(rawData)
e <- expresso(rawData,
bgcorrect.method = "rma",
normalize.method = "constant",
pmcorrect.method = "pmonly",
summary.method="avgdiff"
)
help(oligo::normalize)
help("oligo::normalize")
help("normalize")
help("normalizeMethod")
oligo::normalizationMethods()
# Part 2.6: Turn probe-level information to gene-level data by normalization using RMA
# RMA - Robust Multi-Array Average (http://www.sthda.com/english/wiki/affymetrix-cel-files)
# Returns ExpressionSet
e <- rma(rawData)
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2.6: Turn probe-level information to gene-level data by normalization using RMA
# RMA - Robust Multi-Array Average (http://www.sthda.com/english/wiki/affymetrix-cel-files)
# Returns ExpressionSet
e <- rma(rawData)
help("rma")
library(Biobase, lib.loc = package_loc); library(tzdb, lib.loc = package_loc); library(vroom, lib.loc = package_loc); library(readr, lib.loc = package_loc)
library(S4Vectors, lib.loc = package_loc); library(IRanges, lib.loc = package_loc); library(XVector, lib.loc = package_loc); library(GenomeInfoDb, lib.loc = package_loc); library(Biostrings, lib.loc = package_loc)
library(backports, lib.loc = package_loc); library(Hmisc, lib.loc = package_loc); library(ggcorrplot, lib.loc = package_loc)
library(BiocGenerics, lib.loc = package_loc)
library(oligoClasses, lib.loc = package_loc); library(memoise, lib.loc = package_loc); library(pd.huex.1.0.st.v2, lib.loc = package_loc); library(oligo, lib.loc = package_loc, attach.required = TRUE)
# Part 2: Exploration
library(ggpubr, lib = package_loc)
# Part 3: Dimension Reduction
library(locfit, lib.loc = package_loc)
library(corrr, lib.loc = package_loc); library(idm, lib.loc = package_loc); library(irlba, lib.loc = package_loc)
library(PCAtools, lib.loc = package_loc); library(RMTstat, lib.loc = package_loc); library(biomaRt, lib.loc = package_loc)
library(pROC, lib.loc = package_loc); library(withr, lib.loc = package_loc);
library(EFA.dimensions, lib.loc = package_loc)
# Part 4: Analysis
library(caret, lib.loc = package_loc); library(dplyr, lib.loc = package_loc); library(e1071, lib.loc = package_loc); library(naivebayes, lib.loc = package_loc)
library(class, lib.loc = package_loc); library(gmodels, lib.loc = package_loc)
library(parallel, lib.loc = package_loc); library(doParallel, lib.loc = package_loc)
library(rpart, lib.loc = package_loc); library(rpart.plot, lib.loc = package_loc)
library(nnet, lib.loc = package_loc)
library(randomForest, lib.loc = package_loc)
# Initialize cores for parallel processing
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
clusterEvalQ(cluster, .libPaths("E:/jmcco/Downloads/BNF 300.2 Data/GSE208338_RAW/lib"))
registerDoSEQ()
on.exit(stopCluster(cluster))
'%ni%' <- Negate('%in%')  # define 'not in' func
factor(ALL$BT %in% c("B","B1","B2","B3","B4"))
help("genefilter")
diagnosis.fact != 9
diagnosis.fact !- 9
diagnosis.fact != 9
which(diagnosis.fact != 9)
e[, which(diagnosis.fact != 9)]
exprs(e)[, which(diagnosis.fact != 9)]
View(ALL)
View(ALL)
View(exprs(ALL))
ALL[, 'B']
exprs(ALL)[, 'B']
View(data.pp)
BiocManager::install(
c("filterfun"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(filterfun, lib = package_loc)
# Part 3.1.2: Normality and T-test
f1 <- function(x) (shapiro.test(x)$p.value > alpha)
f2 <- function(x) (t.test(x ~ patientB)$p.value < alpha)
sel1 <- genefilter(exprs(e)[, which(diagnosis.fact != 9)], filterfun(f1))
BiocManager::install(
c("genefilter"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
# Part 2: Exploration
library(ggpubr, lib = package_loc); library(genefilter, lib = package_loc)
sel1 <- genefilter(exprs(e)[, which(diagnosis.fact != 9)], filterfun(f1))
sel2 <- genefilter(exprs(e)[, which(diagnosis.fact == 9)], filterfun(f1))
sel3 <- genefilter(exprs(data.pp), filterfun(f2))
f2 <- function(x) (t.test(x ~ diagnosis.fact)$p.value < alpha)
sel3 <- genefilter(exprs(data.pp), filterfun(f2))
# Part 3.1.2: Normality and T-test
diagnosis.fact.binom <- diagnosis.fact
diagnosis.fact.binom[, which(diagnosis.fact != 9)] <- 1
diagnosis[, which(diagnosis != 9)]
diagnosis[which(diagnosis != 9)]
which(diagnosis != 9)
diagnosis.binom[which(diagnosis.binom != 9)] <- 1
diagnosis.binom <- diagnosis
diagnosis.binom[which(diagnosis.binom != 9)] <- 1
diagnosis.binom.fact <- factor(diagnosis.binom, ordered = FALSE)
remove(diagnosis.fact.binom)
diagnosis.binom.fact
f2 <- function(x) (t.test(x ~ diagnosis.binom.fact)$p.value < alpha)
sel3 <- genefilter(exprs(data.pp), filterfun(f2))
View(sel3)
sum(sel3 == True)
sum(sel3 == TRUE)
sum(sel3 == FALSE)
sum(sel1 == FALSE)
sum(sel2 == FALSE)
sel3 <- genefilter(exprs(e), filterfun(f2))
sum(sel3 == FALSE)
sum(sel3 == TRUE)
features.gf.2 <- rownames(data[selected, ])
selected <- sel1 & sel2 & sel3
features.gf.2 <- rownames(data[selected, ])
selected
sum(selected == FALSE)
remove(cvval)
remove(f1, f2, sel1, sel2, sel3, selected)
BiocManager::install(
c("limma"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
# Part 2: Exploration
library(ggpubr, lib = package_loc); library(genefilter, lib = package_loc); library(limma, lib = package_loc)
help(model.matrix)
factor(diagnosis.fact != 9)
# Part 3.1.3: ANOVA
# Get all with diagnosis
data.pp.diagnosed <- data.pp[, which(diagnosis.fact != 9)]
View(data.pp.diagnosed)
View(data.pp.diagnosed)
exprs(data.pp.diagnosed)
ncols(exprs(data.pp.diagnosed))
ncol(exprs(data.pp.diagnosed))
diagnosis.fact[diagnosis.fact != 9]
diagnosis.fact[which(diagnosis.fact != 9)]
which(diagnosis.fact != 9)
design.ma <- model.matrix(~ 0 + factor(diagnosis.fact[diagnosis.fact != 9]))
View(design.ma)
View(design.ma)
colnames(design.ma) <- c("BPD","MDD","SCZ")
View(design.ma)
fit <- lmFit(data.pp.diagnosed, design.ma)
fit <- eBayes(fit)
toptab <- topTable(fit, coef=2,5,adjust.method="fdr")
print(toptab[,1:5],digits=4)
cont.ma <- makeContrasts(BPD-MDD, MDD-SCZ, levels=factor(diagnosis.fact[diagnosis.fact != 9]))
cont.ma <- makeContrasts(1-2, 2-3, levels=factor(diagnosis.fact[diagnosis.fact != 9]))
# Part 3.1.3: ANOVA
# Get all with diagnosis
diagnosis.binom.fact.named <- diagnosis.binom
diagnosis.binom.fact.named[diagnosis.binom.fact.named == 1]
# Part 3.1.3: ANOVA
# Get all with diagnosis
diagnosis.fact.named <- diagnosis.fact
# Part 3.1.3: ANOVA
# Get all with diagnosis
diagnosis.fact.named <- diagnosis
diagnosis.fact.named[which(diagnosis.fact.named == 1)] <- "BPD"
diagnosis.fact.named
diagnosis.fact.named[which(diagnosis.fact.named == 1)] <- "BPD"
diagnosis.fact.named[which(diagnosis.fact.named == 2)] <- "MDD"
diagnosis.fact.named[which(diagnosis.fact.named == 3)] <- "SCZ"
diagnosis.fact.named[which(diagnosis.fact.named == 9)] <- "CTL"
diagnosis.fact.named
data.pp.diagnosed <- data.pp[, which(diagnosis.fact.named != "CTL")]
View(data.pp.diagnosed)
dim(exprs(data.pp))
dim(exprs(data.pp.diagnosed))
factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"])
design.ma <- model.matrix(~ 0 + factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
colnames(design.ma) <- c("BPD","MDD","SCZ")
fit <- lmFit(data.pp.diagnosed, design.ma)
fit <- eBayes(fit)
toptab <- topTable(fit, coef=2,5,adjust.method="fdr")
print(toptab[,1:5],digits=4)
cont.ma <- makeContrasts(BPD-MDD, MDD-SCZ, levels=factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
View(cont.ma)
featureNames(data)
featureNames(data.pp)
BiocManager::install(
c("multtest", "annaffy", "hgu95av2.db"),
#force = TRUE,
dependencies = TRUE,
lib = package_loc
)
library(multtest, lib = package_loc); library(annaffy, lib = package_loc); library(hgu95av2.db, lib = package_loc)
exprs(data.pp.diagnosed)
# The below is not useful since these diseases are not progression but different types
#design.ma <- model.matrix(~ 0 + factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
#colnames(design.ma) <- c("BPD","MDD","SCZ")
#fit <- lmFit(data.pp.diagnosed, design.ma)
#fit <- eBayes(fit)
#toptab <- topTable(fit, coef=2,5,adjust.method="fdr")
#print(toptab[,1:5],digits=4)
#cont.ma <- makeContrasts(BPD-MDD, MDD-SCZ, levels=factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
# End
panova <- apply(exprs(data.pp.diagnosed), 1, function(x) anova(lm(x ~ factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"])))$Pr[1])
genenames <- featureNames(data.pp.diagnosed)[panova<0.000001]
atab <- aafTableAnn(genenames, "hgu95av2.db", aaf.handler()[c(1:3,8:9,11:13)])
genenames
panova
alpha
sort(panova)
panova < 0.000001
sum(panova < 0.000001)
ALL$BT
# The below is not useful since these diseases are not progression but different types
#design.ma <- model.matrix(~ 0 + factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
#colnames(design.ma) <- c("BPD","MDD","SCZ")
#fit <- lmFit(data.pp.diagnosed, design.ma)
#fit <- eBayes(fit)
#toptab <- topTable(fit, coef=2,5,adjust.method="fdr")
#print(toptab[,1:5],digits=4)
#cont.ma <- makeContrasts(BPD-MDD, MDD-SCZ, levels=factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
# End
panova <- apply(exprs(e), 1, function(x) anova(lm(x ~ diagnosis.fact)$Pr[1])
)
# The below is not useful since these diseases are not progression but different types
#design.ma <- model.matrix(~ 0 + factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
#colnames(design.ma) <- c("BPD","MDD","SCZ")
#fit <- lmFit(data.pp.diagnosed, design.ma)
#fit <- eBayes(fit)
#toptab <- topTable(fit, coef=2,5,adjust.method="fdr")
#print(toptab[,1:5],digits=4)
#cont.ma <- makeContrasts(BPD-MDD, MDD-SCZ, levels=factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
# End
panova <- apply(exprs(e), 1, function(x) anova(lm(x ~ diagnosis.fact))$Pr[1])
sum(panova < 0.000001)
sum(panova > 0.05)
sum(panova < 0.05)
#design.ma <- model.matrix(~ 0 + factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
#colnames(design.ma) <- c("BPD","MDD","SCZ")
#fit <- lmFit(data.pp.diagnosed, design.ma)
#fit <- eBayes(fit)
#toptab <- topTable(fit, coef=2,5,adjust.method="fdr")
#print(toptab[,1:5],digits=4)
#cont.ma <- makeContrasts(BPD-MDD, MDD-SCZ, levels=factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"]))
# End
#panova <- apply(exprs(data.pp.diagnosed), 1, function(x) anova(lm(x ~ factor(diagnosis.fact.named[diagnosis.fact.named != "CTL"])))$Pr[1])
#genenames <- featureNames(data.pp.diagnosed)[panova < 0.000001]
panova <- apply(exprs(data.pp), 1, function(x) anova(lm(x ~ diagnosis.fact))$Pr[1])
genenames <- featureNames(data.pp)[panova < 0.000001]
sum(panova < 0.05)
sum(panova < 0.0001)
sum(panova < 0.001)
